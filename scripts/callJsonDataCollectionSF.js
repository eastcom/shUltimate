//保存框选到的小区到后台function updateHeatCell(checkArr,heatName){    $("#divWhoise").find('p').html('数据保存中，请稍后...');    $("#divWhoise").show();    customHeatName = '自定义热点-' + heatName;    var resultArr = [];    for(var j= 0, lenJ=checkArr.length; j<lenJ; ++j){        var temVal = checkArr[j];        for(var i= 0, lenI=detailedInfoVector.length; i<lenI; ++i){            var name = detailedInfoVector[i].name;            if(temVal == name){                var lacci = detailedInfoVector[i].lacci;                var pos = lacci.indexOf(':');                if(pos !== -1){                    var lac = lacci.slice(0,pos);                    var ci = lacci.slice(pos+1);                    var valLacci = lac + '-' + ci;                }                else{                    var lac = '';                    var ci = '';                    var valLacci = '';                }                var point = detailedInfoVector[i].point;                var lat = point.lat.toString(),                    lng = point.lng.toString();                var type = detailedInfoVector[i].type;                var temObj = {                    //business_circles_id: Math.floor(Math.random()*10000),                    business_circles_name: '自定义热点-' + heatName,                    lac: lac,                    ci: ci,                    lacci: valLacci,                    cell_longitude: lng,                    cell_latitude: lat,                    cell_nt: type,                    cell_name: name,                    cell_id: lacci,                    data_source: '',                    insert_timestamp: '',                    cell_sd_name: '',                    carriers: ''                };                resultArr.push(temObj);                break;            }        }    }    //console.log(resultArr)    var resultObj = {"dbId":"inas","type":"insert","tableName":"META_HOLIDAY_BUSINESS_CIRCLES_CELL_INFO ","datas":resultArr};    $.ajax({        url:'http://'+baseUrl+':8080/services/ws/fast_update/common', //后台处理程序        type:'post',         //数据发送方式        dataType:'json',     //接受数据格式        contentType: "application/json",        accessType: "application/json",        data: JSON.stringify(resultObj),         //要传递的数据        success: function(data){            $("#divWhoise").hide();            $("#divWhoise").find('p').html('数据加载中，请稍后...');            alert('保存成功');            //console.log(data)            //setTimeout(addTrendPlotFromChild,1000*60);            addTrendPlotFromChild(customHeatName);        },        error: function(e){            alert('保存失败');        }    });}//保存数据后显示趋势图function addTrendPlotFromChild(heatName){    $.ajax({        url: 'http://' + baseUrl + ':8080/stream/tool/update-server', //后台处理程序        type: 'get',         //数据发送方式        dataType: 'json',     //接受数据格式        contentType: "application/json",        success: function(){            reloadMenu();//保存之后立即刷新            addPlot(heatName);            if(trendInterval){                window.clearInterval(trendInterval);            }            trendInterval = setInterval(function(){                addPlot(customHeatName);            },1000*60);        },        error: function(){            reloadMenu();//保存之后立即刷新            addPlot(heatName);            if(trendInterval){                window.clearInterval(trendInterval);            }            trendInterval = setInterval(function(){                addPlot(customHeatName);            },1000*60);        }    });}function addPlot(heatName){    document.getElementById('totalCount').style.visibility = 'visible';    document.getElementById('totalData').style.visibility = 'visible';    document.getElementById('httpConnect').style.visibility = 'visible';    document.getElementById('allTrend').style.visibility = 'visible';    var countUrl,        dataUrl,        httpUrl;    var timeStart = getCurrentTimeHour(3),        timeEnd = getCurrentTimeMin(5);    countUrl = "http://"+baseUrl+":8080/stream/totalnum/hotspots?hours=3&hotspot=" +encodeURIComponent(heatName);    dataUrl = "http://"+baseUrl+":8080/stream/ue/hotspot-majors?hours=3&hotspot=" + encodeURIComponent(heatName);    httpUrl = 'http://' + baseUrl + ':8080/stream/ue/http/hotspot-majors-times?hotspot='+ encodeURIComponent(heatName) +'&major=' +encodeURIComponent("即时通信") +'&major=' +encodeURIComponent("应用商店")+ '&major=' + encodeURIComponent("视频") +'&major=' +encodeURIComponent("浏览下载") +'&timeBegin=' + timeStart + '&timeEnd=' +timeEnd;    //总用户数    $.ajax({        url: countUrl,        type: 'get',         //数据发送方式        dataType: 'json',     //接受数据格式        contentType: "application/json"    })        .done(function(data){            $('#divWhoise').show();            //console.log("http://"+baseUrl+":8080/stream/totalnum/hotspots?hours=3&hotspot="+ encodeURIComponent('自定义热点-') +encodeURIComponent(heatName))            //console.log(data)            var objectData = data[heatName];            //console.log(objectData)            var lengthData =objectData.length;            var array2G =[];            var array3G =[];            var array4G =[];            var arrAll = [];            var timeData =[];            for (var i=0; i<lengthData;i++){                array2G.push(objectData[i]['2G']);                array3G.push(objectData[i]['3G']);                array4G.push(objectData[i]['4G']);                var all = objectData[i].total;                arrAll.push(all);                var time = objectData[i].time.substring(11,16);                timeData.push(time);            }            require(                [                    'echarts',                    'echarts/chart/line' // 使用柱状图就加载bar模块，按需加载                ],                function (ec) {                    // 基于准备好的dom，初始化echarts图表                    var myChart = ec.init(document.getElementById('totalCount'));                    var pos = heatName.indexOf('自定义热点-');                    if(pos !== -1){                        heatName = heatName.substring(6);                    }                    option = {                        backgroundColor: 'white',                        title : {                            text: heatName + ' 用户数趋势图'                        },                        tooltip : {                            trigger: 'axis'                        },                        legend: {                            y: 'top',                            x:'right',                            data:['4G用户数','3G用户数','2G用户数','总用户数']                        },                        calculable : true,                        xAxis : [                            {                                type : 'category',                                boundaryGap : false,                                name:'时间',                                data : timeData                            }                        ],                        yAxis : [                            {                                type : 'value',                                name:'用户数（人）',                                axisLabel : {                                    formatter: '{value}'                                }                            }                        ],                        series : [                            {                                name:'4G用户数',                                type:'line',                                data:array4G                            },                            {                                name:'3G用户数',                                type:'line',                                data:array3G                            },                            {                                name:'2G用户数',                                type:'line',                                data:array2G                            },                            {                                name:'总用户数',                                type:'line',                                data:arrAll                            }                        ]                    };                    // 为echarts对象加载数据,并添加单击响应事件                    myChart.setOption(option,true);                }            );            $('#divWhoise').hide();        });    //总流量    $.ajax({        url: dataUrl,        type: 'get',         //数据发送方式        dataType: 'json',     //接受数据格式        contentType: "application/json"    })        .done(function(data){            $('#divWhoise').show();            var objectData = data;            var lengthData=objectData.length;            //alert(lengthData);            var array2G =[];            var array3G =[];            var array4G =[];            var timeData =[];            var arrayAll = [];            for (var i=0; i<lengthData;i++){                var dataThroughPut4G= 0,                    dataThroughPut3G = 0,                    dataThroughPut2G =0;                var all = 0;                for (var name in objectData[i]['4G']){                    if (objectData[i]['4G'][name] != null) {                        dataThroughPut4G = dataThroughPut4G + objectData[i]['4G'][name].ul_bytes / 1024 / 1024;//记录4G流量,单位是MB                        dataThroughPut4G = dataThroughPut4G + objectData[i]['4G'][name].dl_bytes / 1024 / 1024;                    }                    if (objectData[i]['3G'][name] != null) {                        dataThroughPut3G = dataThroughPut3G + objectData[i]['3G'][name].ul_bytes / 1024 / 1024;//记录4G流量,单位是MB                        dataThroughPut3G = dataThroughPut3G + objectData[i]['3G'][name].dl_bytes / 1024 / 1024;                    }                    if (objectData[i]['2G'][name] != null) {                        dataThroughPut2G = dataThroughPut2G + objectData[i]['2G'][name].ul_bytes / 1024 / 1024;//记录4G流量,单位是MB                        dataThroughPut2G = dataThroughPut2G + objectData[i]['2G'][name].dl_bytes / 1024 / 1024;                    }                    all = dataThroughPut2G + dataThroughPut3G + dataThroughPut4G;                }                array2G.push(parseInt(dataThroughPut2G*100)/100);                array3G.push(parseInt(dataThroughPut3G*100)/100);                array4G.push(parseInt(dataThroughPut4G*100)/100);                arrayAll.push(parseInt(all*100)/100);                //alert(array4G[i]);                var time = objectData[i].time.substring(11,16);                timeData.push(time);            }            require(                [                    'echarts',                    'echarts/chart/line' // 使用柱状图就加载bar模块，按需加载                ],                function (ec) {                    // 基于准备好的dom，初始化echarts图表                    var myChart = ec.init(document.getElementById('totalData'));                    var pos = heatName.indexOf('自定义热点-');                    if(pos !== -1){                        heatName = heatName.substring(6);                    }                    option = {                        backgroundColor: 'white ',                        title : {                            text: heatName+ ' 流量趋势图'                        },                        tooltip : {                            trigger: 'axis'                        },                        legend: {                            y: 'top',                            x:'right',                            data:['4G流量','3G流量','2G流量','总流量']                        },                        calculable : true,                        xAxis : [                            {                                type : 'category',                                boundaryGap : false,                                name:'时间',                                data : timeData                            }                        ],                        yAxis : [                            {                                type : 'value',                                name:'流量（MB）',                                axisLabel : {                                    formatter: '{value}'                                }                            }                        ],                        series : [                            {                                name:'4G流量',                                type:'line',                                data:array4G                            },                            {                                name:'3G流量',                                type:'line',                                data:array3G                            },                            {                                name:'2G流量',                                type:'line',                                data:array2G                            },                            {                                name:'总流量',                                type:'line',                                data:arrayAll                            }                        ]                    };                    // 为echarts对象加载数据,并添加单击响应事件                    myChart.setOption(option,true);                }            );            $('#divWhoise').hide();        });    //http接通率    //console.log(timeEnd,timeStart);    $.ajax({        url: httpUrl,        type: 'get',         //数据发送方式        dataType: 'json',     //接受数据格式        contentType: "application/json"    })        .done(function(data){            //console.log(data);            //console.log(httpUrl)            var jishitongxin = [],                liulanxiazai = [],                yingyongshangdian = [],                shipin = [];            var timeArr = [];            var tongxinObj = data['即时通信'],                xiazaiObj = data['浏览下载'],                shangdianObj = data['应用商店'],                shipinObj = data['视频'];            if(tongxinObj){                for(var i= 0,len=tongxinObj.length; i<len; ++i){                    var val = tongxinObj[i]['HTTP成功率']*100;                    //console.log(val)                    var temVal = parseInt(val*100)/100;                    if(!isNumber(temVal) ){                        temVal = 0;                    }                    jishitongxin.push(temVal);                }            }            if(xiazaiObj){                for(var i= 0,len=xiazaiObj.length; i<len; ++i){                    var val = xiazaiObj[i]['HTTP成功率'] *100;                    //console.log(val)                    var temVal = parseInt(val*100)/100;                    if(!isNumber(temVal) ){                        temVal = 0;                    }                    liulanxiazai.push(temVal);                }            }            if(shangdianObj){                for(var i= 0,len=shangdianObj.length; i<len; ++i){                    var val = shangdianObj[i]['HTTP成功率'] *100;                    //console.log(val)                    var temVal = parseInt(val*100)/100;                    if(!isNumber(temVal) ){                        temVal = 0;                    }                    yingyongshangdian.push(temVal);                }            }            if(shipinObj){                for(var i= 0,len=shipinObj.length; i<len; ++i){                    var val = shipinObj[i]['HTTP成功率']*100;                    //console.log(val)                    var temVal = parseInt(val*100)/100;                    if(!isNumber(temVal) ){                        temVal = 0;                    }                    shipin.push(temVal);                    timeArr.push(shipinObj[i].time.substring(11,16));                }            }            //console.log(shipin,liulanxiazai,jishitongxin,yingyongshangdian);            require(                [                    'echarts',                    'echarts/chart/line' // 使用柱状图就加载bar模块，按需加载                ],                function (ec) {                    // 基于准备好的dom，初始化echarts图表                    var myChart = ec.init(document.getElementById('httpConnect'));                    var pos = heatName.indexOf('自定义热点-');                    if(pos !== -1){                        heatName = heatName.substring(6);                    }                    option = {                        backgroundColor: 'white ',                        title : {                            text: heatName+ ' HTTP成功率'                        },                        tooltip : {                            trigger: 'axis'                        },                        legend: {                            y: 'top',                            x:'right',                            data:['即时通信','浏览下载','应用商店','视频']                        },                        calculable : true,                        xAxis : [                            {                                type : 'category',                                boundaryGap : false,                                name:'时间',                                data : timeArr                            }                        ],                        yAxis : [                            {                                type : 'value',                                name:'成功率%',                                axisLabel : {                                    formatter: '{value}'                                }                            }                        ],                        series : [                            {                                name:'即时通信',                                type:'line',                                data:jishitongxin                            },                            {                                name:'浏览下载',                                type:'line',                                data:liulanxiazai                            },                            {                                name:'应用商店',                                type:'line',                                data:yingyongshangdian                            },                            {                                name:'视频',                                type:'line',                                data:shipin                            }                        ]                    };                    // 为echarts对象加载数据,并添加单击响应事件                    myChart.setOption(option,true);                }            );            $('#divWhoise').hide();        });    //*/    //控制指标趋势图可见    document.getElementById('trendVisible').style.visibility = 'visible';    plotVis = true;    document.getElementById('totalData').style.visibility = 'visible';    document.getElementById('totalCount').style.visibility = 'visible';    document.getElementById('allTrend').style.visibility = 'visible';}//热力图回放function playBackHeatMap1(num,time){    if(num<9){        var ave = 1000*time/(8-num+1);    }    switch(num){        case 1:            //设置时间间隔进行动态渲染            heatInterval1 = setTimeout(function(){                interval(0);            },0);            heatInterval2 = setTimeout(function(){                interval(10);            },2000);            heatInterval3 = setTimeout(function(){                interval(20);            },4000);            heatInterval4 = setTimeout(function(){                interval(30);            },6000);            heatInterval5 = setTimeout(function(){                interval(40);            },8000);            heatInterval6 = setTimeout(function(){                interval(50);            },10000);            heatInterval7 = setTimeout(function(){                interval(60);            },12000);            heatInterval8 = setTimeout(function(){                interval(65);            },14000);            break;        case 2:            //设置时间间隔进行动态渲染            heatInterval2 = setTimeout(function(){                interval(10);            },0);            heatInterval3 = setTimeout(function(){                interval(20);            },ave);            heatInterval4 = setTimeout(function(){                interval(30);            },ave*2);            heatInterval5 = setTimeout(function(){                interval(40);            },ave*3);            heatInterval6 = setTimeout(function(){                interval(50);            },ave*4);            heatInterval7 = setTimeout(function(){                interval(60);            },ave*5);            heatInterval8 = setTimeout(function(){                interval(65);            },ave*6);            break;        case 3:            //设置时间间隔进行动态渲染            heatInterval3 = setTimeout(function(){                interval(20);            },0);            heatInterval4 = setTimeout(function(){                interval(30);            },ave);            heatInterval5 = setTimeout(function(){                interval(40);            },ave*2);            heatInterval6 = setTimeout(function(){                interval(50);            },ave*3);            heatInterval7 = setTimeout(function(){                interval(60);            },ave*4);            heatInterval8 = setTimeout(function(){                interval(65);            },ave*5);            break;        case 4:            //设置时间间隔进行动态渲染            heatInterval4 = setTimeout(function(){                interval(30);            },0);            heatInterval5 = setTimeout(function(){                interval(40);            },ave);            heatInterval6 = setTimeout(function(){                interval(50);            },ave*2);            heatInterval7 = setTimeout(function(){                interval(60);            },ave*3);            heatInterval8 = setTimeout(function(){                interval(65);            },ave*4);            break;        case 5:            //设置时间间隔进行动态渲染            heatInterval5 = setTimeout(function(){                interval(40);            },0);            heatInterval6 = setTimeout(function(){                interval(50);            },ave);            heatInterval7 = setTimeout(function(){                interval(60);            },ave*2);            heatInterval8 = setTimeout(function(){                interval(65);            },ave*3);            break;        case 6:            //设置时间间隔进行动态渲染            heatInterval6 = setTimeout(function(){                interval(50);            },0);            heatInterval7 = setTimeout(function(){                interval(60);            },ave);            heatInterval8 = setTimeout(function(){                interval(65);            },ave*2);            break;        case 7:            //设置时间间隔进行动态渲染            heatInterval7 = setTimeout(function(){                interval(60);            },0);            heatInterval8 = setTimeout(function(){                interval(65);            },ave);            break;        case 8:            //设置时间间隔进行动态渲染            heatInterval8= setTimeout(function(){                interval(65);            },0);            break;        default:            return;    }    function interval(k){        var result = [];        for(var i= 0, lenI=resultHeat.length; i<lenI; ++i){            var temArr = resultHeat[i][k];            result.push(temArr);        }        playHeatMapRender(result);    }    function playHeatMapRender (arr) {        if (map.hasLayer(heatMapLayer)){            switchControl.removeLayer(heatMapLayer);            map.removeLayer(heatMapLayer);        }        var testData = new Object();        var cfg = {            // radius should be small ONLY if scaleRadius is true (or small radius is intended)            "radius": 0.002,            "maxOpacity": .6,            // scales the radius based on map zoom            "scaleRadius": true,            // if set to false the heatmap uses the global maximum for colorization            // if activated: uses the data maximum within the current map boundaries            //   (there will always be a red spot with useLocalExtremas true)            "useLocalExtrema": true,            // which field name in your data represents the latitude - default "lat"            latField: 'lat',            // which field name in your data represents the longitude - default "lng"            lngField: 'lng',            // which field name in your data represents the data value - default "value"            valueField: 'value'        };        //alert(arr.length);        testData={max: 10, min: 0,data: arr};        heatMapLayer = new HeatmapOverlay(cfg);        map.addLayer(heatMapLayer);        heatMapLayer.setData(testData);        switchControl.addOverlay(heatMapLayer,"热点渲染图");        ifHeatMapLayer=true;    }}function playBackHeatMap(num,time){    if(num<9){        var ave = 1000*time/(8-num+1);    }    //    switch(num){        case 1:            //设置时间间隔进行动态渲染            heatInterval1 = setTimeout(function(){                interval(0);            },0);            heatInterval2 = setTimeout(function(){                interval(1);            },2000);            heatInterval3 = setTimeout(function(){                interval(2);            },4000);            heatInterval4 = setTimeout(function(){                interval(3);            },6000);            heatInterval5 = setTimeout(function(){                interval(4);            },8000);            heatInterval6 = setTimeout(function(){                interval(5);            },10000);            heatInterval7 = setTimeout(function(){                interval(6);            },12000);            heatInterval8 = setTimeout(function(){                interval(7);            },14000);            break;        case 2:            //设置时间间隔进行动态渲染            heatInterval2 = setTimeout(function(){                interval(1);            },0);            heatInterval3 = setTimeout(function(){                interval(2);            },ave);            heatInterval4 = setTimeout(function(){                interval(3);            },ave*2);            heatInterval5 = setTimeout(function(){                interval(4);            },ave*3);            heatInterval6 = setTimeout(function(){                interval(5);            },ave*4);            heatInterval7 = setTimeout(function(){                interval(6);            },ave*5);            heatInterval8 = setTimeout(function(){                interval(7);            },ave*6);            break;        case 3:            //设置时间间隔进行动态渲染            heatInterval3 = setTimeout(function(){                interval(2);            },0);            heatInterval4 = setTimeout(function(){                interval(3);            },ave);            heatInterval5 = setTimeout(function(){                interval(4);            },ave*2);            heatInterval6 = setTimeout(function(){                interval(5);            },ave*3);            heatInterval7 = setTimeout(function(){                interval(6);            },ave*4);            heatInterval8 = setTimeout(function(){                interval(7);            },ave*5);            break;        case 4:            //设置时间间隔进行动态渲染            heatInterval4 = setTimeout(function(){                interval(3);            },0);            heatInterval5 = setTimeout(function(){                interval(4);            },ave);            heatInterval6 = setTimeout(function(){                interval(5);            },ave*2);            heatInterval7 = setTimeout(function(){                interval(6);            },ave*3);            heatInterval8 = setTimeout(function(){                interval(7);            },ave*4);            break;        case 5:            //设置时间间隔进行动态渲染            heatInterval5 = setTimeout(function(){                interval(4);            },0);            heatInterval6 = setTimeout(function(){                interval(5);            },ave);            heatInterval7 = setTimeout(function(){                interval(6);            },ave*2);            heatInterval8 = setTimeout(function(){                interval(7);            },ave*3);            break;        case 6:            //设置时间间隔进行动态渲染            heatInterval6 = setTimeout(function(){                interval(5);            },0);            heatInterval7 = setTimeout(function(){                interval(6);            },ave);            heatInterval8 = setTimeout(function(){                interval(7);            },ave*2);            break;        case 7:            //设置时间间隔进行动态渲染            heatInterval7 = setTimeout(function(){                interval(6);            },0);            heatInterval8 = setTimeout(function(){                interval(7);            },ave);            break;        case 8:            //设置时间间隔进行动态渲染            heatInterval8= setTimeout(function(){                interval(7);            },0);            break;        default:            return;    }    //*/    function interval(k){        var result = resultHeat[k];        //console.log('调用前',result)        playHeatMapRender(result);    }    function playHeatMapRender (arr) {        if (map.hasLayer(heatMapLayer)){            switchControl.removeLayer(heatMapLayer);            map.removeLayer(heatMapLayer);        }        var testData = new Object();        var cfg = {            // radius should be small ONLY if scaleRadius is true (or small radius is intended)            "radius": 0.002,            "maxOpacity": .8,            // scales the radius based on map zoom            "scaleRadius": true,            // if set to false the heatmap uses the global maximum for colorization            // if activated: uses the data maximum within the current map boundaries            //   (there will always be a red spot with useLocalExtremas true)            "useLocalExtrema": true,            // which field name in your data represents the latitude - default "lat"            latField: 'lat',            // which field name in your data represents the longitude - default "lng"            lngField: 'lng',            // which field name in your data represents the data value - default "value"            valueField: 'value'        };        //alert(arr.length);        /*/处理空值数据        var result = [];        for (var i= 0,len =arr.length; i<len; i++){            var temVal = arr[i].value;            var lat = arr[i].lat,                lng = arr[i].lng;            var temObj = {                lat: lat,                lng: lng,                value: temVal            };            result.push(temObj);        }        //*/        //console.log(result);        testData={max: 5000, min: 0,data: arr};        heatMapLayer = new HeatmapOverlay(cfg);        map.addLayer(heatMapLayer);        heatMapLayer.setData(testData);        switchControl.addOverlay(heatMapLayer,"热点渲染图");        ifHeatMapLayer=true;    }}function clearPlayHeatMap(){    window.clearTimeout(heatInterval1);    window.clearTimeout(heatInterval2);    window.clearTimeout(heatInterval3);    window.clearTimeout(heatInterval4);    window.clearTimeout(heatInterval5);    window.clearTimeout(heatInterval6);    window.clearTimeout(heatInterval7);    window.clearTimeout(heatInterval8);}function modifyTime(){    var hourDate = new Date();    var curHour = hourDate.getHours();    var temArr = $('#setTime .modify-time');    for(var i= 0, len=temArr.length; i<len; ++i){        var temVal = curHour-6+i;        if(temVal<0){            temVal += 24;//24小时制        }        temArr[i].innerHTML = temVal > 9 ? temVal : ('0' + temVal);    }}//定位查询函数function panToPosition(text){    //var ifLocate = false;    //var text = $('#locationSearch').val();    //alert(text);    removePopup();    var markerLocation = L.icon({        iconUrl: 'images/marker-icon.png',        iconSize: [25, 41]    });    if(!funcChina(text)){        alert('您的输入格式有误，请重新输入!');        return;    }    if(text.indexOf(',') !== -1 || text.indexOf('，') !== -1){        //ifLocate = true;        var minLat = southWest.lat;        var maxLat = northEast.lat;        var minLng = southWest.lng;        var maxLng = northEast.lng;        var pos = (text.indexOf(',')>0) ? text.indexOf(','):text.indexOf('，');        var lngValue = text.substring(0,pos);        var latValue = text.substring(pos+1);        if(latValue >= minLat && latValue<= maxLat && lngValue >= minLng && lngValue <= maxLng){            var point = L.latLng(parseFloat(latValue),parseFloat(lngValue));            var marker = L.marker(point,{title: '定位坐标:'+'\n'+lngValue +','+latValue, icon: markerLocation});            //marker.bindPopup(heatPopup);            allLayer.addLayer(marker);            map.addLayer(allLayer);            ifAllLayer=true;            map.setView(point,15);        }        else{            alert('您输入的坐标超出本地图范围，请重新输入!\n上海市地理范围:\n经度:120.92651~122.104797\n纬度:30.61350~31.94256');            return;        }    }    else{        alert('您的输入格式有误，请重新输入!');    }    document.getElementById('location').style.visibility = "hidden";}//判断字符串中是否含有中文function funcChina(obj){    //var obj = document.form1.txtName.value;    if(/.*[\u4e00-\u9fa5]+.*$/.test(obj))    {        //alert("不能含有汉字！");        return false;    }    return true;}//搜索按钮的核心处理函数，还可以接受其他页面的参数请求，做相应的查询function searchByAjax(text, callResponse){    removePopup();    var ifRoad = false;//判断用户查询的是否为道路    if(text.indexOf('路-') !== -1){        ifRoad = true;        var pos = text.indexOf('-');        text = text.substring(0,pos);    }    var ifDistricts = false;//判断用户查询的是否为重点区域    if(text.indexOf('区域') !== -1){        ifDistricts = true;        var pos = text.indexOf('区域');        text = text.substring(0,pos);    }    if(text.indexOf('重点') !== -1){        ifDistricts = true;        var pos = text.indexOf('重点');        text = text.substring(0,pos);    }    var cellNameUrl = "http://"+baseUrl+":8080//services/ws/rest/info/grid_cell?page=1&limit=500&cellName=%"+encodeURIComponent(text)+"%"+"&district="+encodeURIComponent('全市');    console.log(cellNameUrl)    if(ifRoad === false && ifDistricts === false){        $("#divWhoise").show();        $.ajax({            type : "get",            async : true, //异步执行            url : cellNameUrl,            data : {},            dataType : "json" //返回数据形式为json        })            .done(function(data){                //removePopup();                var lengthRows = data.rows.length;                if(lengthRows){                    for(var i=0; i<lengthRows; i++){                        if(data.rows[i].latitude != undefined && data.rows[i].latitude != null && data.rows[i].latitude != "" && data.rows[i].longitude != undefined && data.rows[i].longitude != null && data.rows[i].longitude != ""){                            var point = L.latLng(parseFloat(data.rows[i].latitude), parseFloat(data.rows[i].longitude));                            var popupContent = data.rows[i].cellName;                            var typeMarker = data.rows[i].cellNt;                            var lacci = data.rows[i].lacci;                            var temObj = {};                            temObj.point = point;                            temObj.name = popupContent;                            temObj.type = typeMarker;                            temObj.lacci = lacci;                            temObj.id = lacci;                            detailedInfoVector.push(temObj);                            //temObj.id = idValue;                            //为小区绑定popup                            var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(30, 0),closeButton:true, closeOnClick:false})                                .setLatLng(point);                            var testHtml = "propertyPerformance.html?"+popupContent;                            heatPopup.setContent("<iframe width=550px frameborder=no height=300px src="+testHtml+"></iframe>");                            if (typeMarker === "2G"){                                var marker = L.marker(point,{title: popupContent, icon: marker2G});                                marker.bindPopup(heatPopup);                                districtsLayer.addLayer(marker);                            }                            else if (typeMarker === "3G"){                                var marker = L.marker(point,{title: popupContent, icon: marker3G});                                marker.bindPopup(heatPopup);                                districtsLayer.addLayer(marker);                            }                            else{                                var marker = L.marker(point,{title: popupContent, icon: marker4G});                                marker.bindPopup(heatPopup);                                districtsLayer.addLayer(marker);                            }                        }                    }                    map.addLayer(districtsLayer);                    ifDistrictsLayer=true;                    map.setView(point,15);                }                else{                    //alert("条件无效，请重新输入查询字符");                }                $("#divWhoise").hide();                return;            });    }}//鼠标框选查询事件function queryByRectangle1(maxLat,maxLng,minLat,minLng) {    removePopup();    $("#divWhoise").show();    //ajax方式获取数据    var temUrl = "http://"+baseUrl+":8080/services/ws/rest/info/grid_cell/lb";    $.ajax({        url: temUrl,        type: 'GET',        dataType: 'json',        data: {minLongitude:minLng,minLatitude:minLat,maxLongitude:maxLng,maxLatitude:maxLat ,uuid:Math.random()}    })        .done(function(data){            var lengthRows = data.rows.length;            //console.log(temUrl);            //alert(lengthRows);            for(var i=0;i<lengthRows;i++){                //通过最大最小坐标，产生随机坐标，并绘制marker                var latMax = data.rows[i].gridLatitudeMax,                    latMin = data.rows[i].gridLatitudeMin,                    lngMax = data.rows[i].gridLongitudeMax,                    lngMin = data.rows[i].gridLongitudeMin;                var point = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);                // marker的title属性,同时也是传参的cellName                var popupContent = data.rows[i].cellName;                var typeMarker = data.rows[i].cellNt;                var idValue = data.rows[i].gridId;                var lacci = data.rows[i].lacci;                if(lacci.indexOf('-') !== -1){                    lacci = lacci.replace('-',':');                }                //为detailedeInfoVector数组赋值                var temObj = {};                temObj.point = point;                temObj.name = popupContent;                temObj.type = typeMarker;                temObj.id = idValue;                temObj.lacci = lacci;                detailedInfoVector.push(temObj);                //为小区绑定popup                var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                    .setLatLng(point);                heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lacci+"!"+encodeURIComponent(heatIndexDis) + "&" + encodeURIComponent(popupContent) +'></iframe>');                if (typeMarker == "2G"){                    var marker = L.marker(point,{title: popupContent, icon: marker2G,keepInView:true});                    marker.bindPopup(heatPopup);                    districtsLayer.addLayer(marker);                }                else if (typeMarker == "3G"){                    var marker = L.marker(point,{title: popupContent, icon: marker3G,keepInView:true});                    marker.bindPopup(heatPopup);                    districtsLayer.addLayer(marker);                }                else{                    var marker = L.marker(point,{title: popupContent, icon: marker4G,keepInView:true});                    marker.bindPopup(heatPopup);                    districtsLayer.addLayer(marker);                }            }            map.addLayer(districtsLayer);            ifDistrictsLayer = true;            //为框选到的小区添加列表            callListFromXiaoQu();            $("#divWhoise").hide();        });    //*/}function queryByRectangle(maxLat,maxLng,minLat,minLng) {    removePopup();    $("#divWhoise").show();    //ajax方式获取数据    //var temUrl = "http://" + baseUrl + ":8080/services/ws/fast_query/gis/kpi/findGridCell?business_circles_name="+encodeURIComponent(heatIndexDis) +"&minLongitude=" +minLng +"&minLatitude=" +minLat + "&maxLongitude=" + maxLng +"&maxLatitude=" + maxLat;    var temUrl = "http://" + baseUrl + ":8080/services/ws/fast_query/gis/kpi/findGridCells?minLongitude=" +minLng +"&minLatitude=" +minLat + "&maxLongitude=" + maxLng +"&maxLatitude=" + maxLat;    //console.log("http://"+baseUrl+":8080/services/ws/fast_query/gis/kpi/findGridCell?business_circles_name="+encodeURIComponent(heatIndexDis) +"&minLongitude=" +minLng +"&minLatitude=" +minLat + "&maxLongitude=" + maxLng +"&maxLatitude=" + maxLat)    $.ajax({        url: temUrl,        type: 'GET',        dataType: 'json',        data: {}        //data: {business_circles_name:encodeURIComponent(heatIndexDis),minLongitude:minLng,minLatitude:minLat,maxLongitude:maxLng,maxLatitude:maxLat ,uuid:Math.random()}    })        .done(function(data){            //console.log(data)            var lengthRows = data.length;            //console.log(temUrl);            //alert(lengthRows);            for(var i=0;i<lengthRows;i++){                var cell_longitude = parseFloat(data[i].cell_longitude),                    cell_latitude = parseFloat(data[i].cell_latitude);                //console.log(cell_latitude,cell_longitude)                if(cell_latitude != "" && cell_longitude != "" && cell_latitude != " " && cell_longitude != " "){                    //通过最大最小坐标，产生随机坐标，并绘制marker                    var latMax = cell_latitude + 0.002,                        latMin = cell_latitude - 0.002,                        lngMax = cell_longitude + 0.002,                        lngMin = cell_longitude - 0.002;                    var point = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);                    // marker的title属性,同时也是传参的cellName                    var popupContent = data[i].cell_name;                    var typeMarker = data[i].cell_nt;                    var idValue = data[i].lacci;                    var lacci = data[i].lacci;                    if(lacci.indexOf('-') !== -1){                        lacci = lacci.replace('-',':');                    }                    //为detailedeInfoVector数组赋值                    var temObj = {};                    temObj.point = point;                    temObj.name = popupContent;                    temObj.type = typeMarker;                    temObj.id = idValue;                    temObj.lacci = lacci;                    detailedInfoVector.push(temObj);                    //为小区绑定popup                    var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                        .setLatLng(point);                    heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lacci+"!"+encodeURIComponent(heatIndexDis) + "&" + encodeURIComponent(popupContent) +'></iframe>');                    if (typeMarker == "2G"){                        var marker = L.marker(point,{title: popupContent, icon: marker2G,keepInView:true});                        marker.bindPopup(heatPopup);                        districtsLayer.addLayer(marker);                    }                    else if (typeMarker == "3G"){                        var marker = L.marker(point,{title: popupContent, icon: marker3G,keepInView:true});                        marker.bindPopup(heatPopup);                        districtsLayer.addLayer(marker);                    }                    else{                        var marker = L.marker(point,{title: popupContent, icon: marker4G,keepInView:true});                        marker.bindPopup(heatPopup);                        districtsLayer.addLayer(marker);                    }                }                else{                    continue;                }            }            map.addLayer(districtsLayer);            ifDistrictsLayer = true;            //为框选到的小区添加列表            callListFromXiaoQu();            $("#divWhoise").hide();        });    //*/}//二次框选查询事件function resultQueryByRectangle(maxLat,maxLng,minLat,minLng){    //关闭打开的ui窗口    if(rectangleHappened){        $('#win').window('close');        rectangleHappened = false;    }    //移除小区图层    if (ifDistrictsLayer){        map.removeLayer(districtsLayer2G);        switchControl.removeLayer(districtsLayer2G);        districtsLayer2G.clearLayers();        map.removeLayer(districtsLayer3G);        switchControl.removeLayer(districtsLayer3G);        districtsLayer3G.clearLayers();        map.removeLayer(districtsLayer4G);        switchControl.removeLayer(districtsLayer4G);        districtsLayer4G.clearLayers();        map.removeLayer(districtsLayer);        switchControl.removeLayer(districtsLayer);        districtsLayer.clearLayers();        ifDistrictsLayer=false;    }    //移除临时图层    if (ifTemLayer){        map.removeLayer(temLayer);        //switchControl.removeLayer(temLayer);        temLayer.clearLayers();        ifTemLayer=false;    }    //移除search时的图层    if (ifAllLayer){        map.removeLayer(allLayer);        //switchControl.removeLayer(districtsLayer);        allLayer.clearLayers();        ifAllLayer=false;    }    //移除cluster中的图层    if(ifMarkersCluster){        map.removeLayer(markerClusters);        //switchControl.removeLayer(markerClusters);        markerClusters.clearLayers();        ifMarkersCluster=false;    }    //移除区域图层    if (ifPolygonLayer){        map.removeLayer(polygonLayer);        switchControl.removeLayer(polygonLayer);        polygonLayer.clearLayers();        ifPolygonLayer=false;    }    //移除图例控件    if(heatMapLegend == true){        map.removeControl(legend);        heatMapLegend = false;    }    //移除热力图    if (ifHeatMapLayer){        switchControl.removeLayer(heatMapLayer);        map.removeLayer(heatMapLayer);        ifHeatMapLayer=false;    }    $("#divWhoise").show();    var temDetailed = [];    for(var i=0;i<detailedInfoVector.length;i++){        var latLng = detailedInfoVector[i].point;        var popupContent = detailedInfoVector[i].name;        var typeMarker = detailedInfoVector[i].type;        var idValue = detailedInfoVector[i].id;        var lacci = detailedInfoVector[i].lacci;        var latValue = latLng.lat;        var lngValue = latLng.lng;        if(latValue >= minLat && latValue<= maxLat && lngValue>= minLng && lngValue<= maxLng){            var temObj = {};            temObj.point = latLng;            temObj.name = popupContent;            temObj.type = typeMarker;            temObj.id = idValue;            temObj.lacci = lacci;            temDetailed.push(temObj);            //为小区绑定popup            var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                .setLatLng(latLng);            heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lacci+"!"+encodeURIComponent(heatIndexDis) + "&" + encodeURIComponent(popupContent) +'></iframe>');            if (typeMarker == "2G"){                var marker = L.marker(latLng,{title: popupContent, icon: marker2G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer.addLayer(marker);            }            else if (typeMarker == "3G"){                var marker = L.marker(latLng,{title: popupContent, icon: marker3G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer.addLayer(marker);            }            else{                var marker = L.marker(latLng,{latLng: popupContent, icon: marker4G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer.addLayer(marker);            }        }    }    var arrDistrictsLayer = districtsLayer.getLayers();//如果二次查询没有查到数据，则从后台重新查询    if(arrDistrictsLayer.length){        map.addLayer(districtsLayer);        ifDistrictsLayer = true;        //清空detailedInfoVector,并重新赋值        detailedInfoVector = [];        detailedInfoVector = detailedInfoVector.concat(temDetailed);        //为第二次框选到的小区添加列表        callListFromXiaoQu();        $("#divWhoise").hide();    }    else{        queryByRectangle(maxLat,maxLng,minLat,minLng);    }}//栅格右键单击超链接时调用的事件function addHeatPopupFromList(str,indexName) {    if (ifTemLayer){        map.removeLayer(temLayer);        temLayer.clearLayers();        ifTemLayer=false;    }    var lengthRows = detailedInfoVector.length;    for(var i=0; i<lengthRows; i++){        var cellName = detailedInfoVector[i].name;        if(cellName === str){            var point = detailedInfoVector[i].point;            var typeMarker = detailedInfoVector[i].type;            var lacci = detailedInfoVector[i].lacci;            var popupContent = detailedInfoVector[i].name;            //为小区绑定popup            var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                .setLatLng(point);            heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lacci+"!"+encodeURIComponent(heatIndexDis) + "&" + encodeURIComponent(popupContent) +'></iframe>');            if (typeMarker == "2G"){                var marker = L.marker(point,{title: cellName,riseOnHover:true, icon: marker2GGreen});                marker.bindPopup(heatPopup);                temLayer.addLayer(marker);                map.setView(point,17);            }            else if (typeMarker == "3G"){                var marker = L.marker(point,{title: cellName,riseOnHover:true, icon: marker3GGreen});                marker.bindPopup(heatPopup);                temLayer.addLayer(marker);                map.setView(point,17);            }            else{                var marker = L.marker(point,{title: cellName,riseOnHover:true, icon: marker4GGreen});                marker.bindPopup(heatPopup);                temLayer.addLayer(marker);                map.setView(point,17);            }            map.addLayer(temLayer);            ifTemLayer = true;            return;        }    }}function addHeatPopupFromList1(str,indexName) {    if (ifTemLayer){        map.removeLayer(temLayer);        temLayer.clearLayers();        ifTemLayer=false;    }    var lengthRows = detailedInfoVector.length;    for(var i=0; i<lengthRows; i++){        var cellName = detailedInfoVector[i].name;        if(cellName === decodeURIComponent(str,"utf-8")){            var point = detailedInfoVector[i].point;            //var typeMarker = detailedInfoVector[i].type;            var lacci = detailedInfoVector[i].id;            //为小区绑定popup            var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                .setLatLng(point);            heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lacci+"!"+encodeURIComponent(heatIndexDis) + "&" + encodeURI(cellName) +'></iframe>');            map.openPopup(heatPopup);            //window.open ("sitePieCharts.html?"+lacci+"!"+indexName+"", '_blank', 'height=360, width=550, top=200,left=200, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no');            return;        }    }}//为框选到的小区添加列表function callListFromXiaoQu(){    var div = $('#win');    document.getElementById("win").style.visibility = "visible";    div.window({        title:" ",        closed:false,        modal:false,        minimizable:false,        border:false,        shadow:false,        maximizable:false,        collapsible:false,        closable:true,        resizable:false,        left:880,        top:50,        width:350,        height:390    });    div.html( '<iframe width="320px" frameborder=no height="340px" src="rectangleQueryListDistrictsF.html?"></iframe>');    rectangleHappened = true;}//注册绘制环形进度条核心函数function Circle() {    this.radius = 42; // 圆环半径    this.lineWidth = 12; // 圆环边的宽度    this.strokeStyle = '#2F4F4F'; //边的颜色    this.fillStyle = 'blue'; //填充色    this.lineCap = 'round';}Circle.prototype.draw = function(ctx) {    ctx.beginPath();    ctx.arc(70, 50, this.radius, 0, Math.PI*2, true);    ctx.lineWidth = this.lineWidth;    ctx.strokeStyle = this.strokeStyle;    ctx.stroke(); // 这里用stroke画一个空心圆    ctx.closePath();};function Ring(startAngle, percent) {    Circle.call(this);    this.startAngle = startAngle || 3*Math.PI/2; //弧起始角度    this.percent = percent; //弧占的比例,100时，需要特殊处理}Ring.prototype = Object.create(Circle.prototype);Ring.prototype.drawRing = function(ctx) {    //根据text大小定义颜色    var fillColor;    var text = this.percent;    if(text<= 20){        fillColor = "lightgreen ";    }    else if(text<= 40){        fillColor = "yellow";    }    else if(text<= 60){        fillColor = "skyblue ";    }    else if(text<= 80){        fillColor = "#0000FF ";    }    else{        fillColor = "red";    }    this.draw(ctx); // 调用Circle的draw方法画圈圈    // angle    ctx.beginPath();    //var anglePerSec = 2 * Math.PI / (100 / this.percent); // 蓝色的弧度    if(text !==100){        var anglePerSec = Math.PI*(this.percent)/100;    }    else{        var anglePerSec = Math.PI*(this.percent)/100 - Math.PI*3/2;    }    ctx.arc(70, 50, this.radius, this.startAngle, anglePerSec , false); //这里的圆心坐标要和cirle的保持一致    ctx.strokeStyle = fillColor;    ctx.lineCap = this.lineCap;    ctx.stroke();    ctx.closePath();    //在中间写字    ctx.font = "bold 24pt Microsoft YaHei";    ctx.fillStyle = 'white';    ctx.textAlign = 'center';    ctx.textBaseline = 'middle';    ctx.moveTo(70, 50);    ctx.fillText(text, 70, 50);    ctx.closePath();};//基本环形进度条绘制function drawProcess(text) {    //根据text大小定义颜色    var fillColor;    if(text<= 20){        fillColor = "lightgreen ";    }    else if(text<= 40){        fillColor = "orange ";    }    else if(text<= 60){        fillColor = "skyblue ";    }    else if(text<= 80){        fillColor = "#0000FF ";    }    else{        fillColor = "red";    }    // 选出页面上所有class为process的canvas元素,然后迭代每一个元素画图(这里用Jquery的选择器选的)    $('canvas.process').each(function () {        // 第一部先拿到canvas标签中间的文字,就是那个61%(这里的stringTrim方法是我自己的方法,去前后空格的方法很多的,这里就不贴出来了)        //var text = commonutil.stringTrim($(this).text());        //var process = text.substring(0, text.length - 1);        // 一个canvas标签        var canvas = this;        // 拿到绘图上下文,目前只支持"2d"        var context = canvas.getContext('2d');        // 将绘图区域清空,如果是第一次在这个画布上画图,画布上没有东西,这步就不需要了        //context.clearRect(0, 0, 150, 75);        // ***开始画一个灰色的圆        context.beginPath();        // 坐标移动到圆心        context.moveTo(70, 50);        // 画圆,圆心是24,24,半径24,从角度0开始,画到2PI结束,最后一个参数是方向顺时针还是逆时针,顺时针方向(false)        context.arc(70, 50, 50, 0, Math.PI * 2, false);        context.closePath();        // 填充颜色        context.fillStyle = '#ddd';        context.fill();        // ***灰色的圆画完        // 画进度        context.beginPath();        // 画扇形的时候这步很重要,画笔不在圆心画出来的不是扇形        context.moveTo(70, 50);        // 跟上面的圆唯一的区别在这里,不画满圆,画个扇形        context.arc(70, 50, 50, Math.PI*3/2, Math.PI*text/100, false);        context.closePath();        context.fillStyle = fillColor;        context.fill();        // 画内部空白        context.beginPath();        context.moveTo(70, 50);        context.arc(70, 50, 40, 0, Math.PI * 2, true);        context.closePath();        context.fillStyle = 'rgba(255,255,255,1)';        //context.fillStyle = '#F5FFFA ';        context.fill();        /*/ 画一条线         context.beginPath();         context.arc(70, 50, 40, 0, Math.PI * 2, true);         context.closePath();         // 与画实心圆的区别,fill是填充,stroke是画线         context.strokeStyle = '#ddd';         context.stroke();         //*/        //在中间写字        context.font = "bold 24pt Microsoft YaHei";        context.fillStyle = fillColor;        context.textAlign = 'center';        context.textBaseline = 'middle';        context.moveTo(70, 50);        context.fillText(text, 70, 50);    });}//随时间改变仪表盘数据function getChartData(str) {    //获得图表的options对象    var options = gaugeChart.getOption();    //通过Ajax获取数据    $.ajax({        type : "get",        async : true, //异步执行        url : "http://"+baseUrl+":8080/services/ws/fast_query/gsma/inas/tdKpiSummary",        data : {},        dataType : "json", //返回数据形式为json        success : function(jsondata) {            if (jsondata) {                var indexObject = jsondata[str];                var indexVoiceValue;                if(indexObject){                    indexVoiceValue = indexObject.语音接通率;                    if(indexVoiceValue ){                        indexVoiceValue = indexObject.语音接通率;                    }                    else{                        indexVoiceValue = 0;                    }                }                else{                    indexVoiceValue = 0;                }                //temObj.value = parseInt(Math.random()*(100-10)+10);                //temObj.value =parseFloat((userValue/baseValue).toFixed(2));//toFixed保留几位小数                var temObj ={};                var dataArray = [];                temObj.name = "语音接通率";                temObj.value = indexVoiceValue;                dataArray.push(temObj);                options.series[0].data = dataArray;                gaugeChart.hideLoading();                gaugeChart.setOption(options);            }        },        error : function(errorMsg) {            //alert(errorMsg.error);            gaugeChart.hideLoading();            return;        }    });    //*/}function getSignalChartData(str) {    //获得图表的options对象    var options = gaugeSignalChart.getOption();    //通过Ajax获取数据    $.ajax({        type : "get",        async : true, //异步执行        url : "http://"+baseUrl+":8080/services/ws/fast_query/gsma/inas/tdKpiSummary",        data : {},        dataType : "json", //返回数据形式为json        success : function(jsondata) {            if (jsondata) {                var indexObject = jsondata[str];                var indexDataValue;                if(indexObject){                    indexDataValue = indexObject.数据接通率;                    if(indexDataValue ){                        indexDataValue = indexObject.数据接通率;                    }                    else{                        indexDataValue = 0;                    }                }                else{                    indexDataValue = 0;                }                //temObj.value = parseInt(Math.random()*(100-10)+10);                //temObj.value =parseFloat((userValue/baseValue).toFixed(2));//toFixed保留几位小数                var temObj ={};                var dataArray = [];                temObj.name = "数据接通率";                temObj.value = indexDataValue;                dataArray.push(temObj);                options.series[0].data = dataArray;                gaugeSignalChart.hideLoading();                gaugeSignalChart.setOption(options);            }        },        error : function(errorMsg) {            //alert(errorMsg.error);            gaugeSignalChart.hideLoading();            return;        }    });    //*/}function getDataChartData(str) {    //获得图表的options对象    var options = gaugeDataChart.getOption();    //通过Ajax获取数据    $.ajax({        type : "get",        async : true, //异步执行        url : "http://"+baseUrl+":8080/stream/ue/hotspot-majors?hours=3&hotspot="+encodeURIComponent(str),        data : {},        dataType : "json", //返回数据形式为json        success : function(result) {            if (result) {                var targetObj = result;                var targetLength = targetObj.length;                var userValue =0;                var baseValue =100;                var temObj = {};                var dataArray = [];                temObj.value = parseInt(Math.random()*(100-10)+10);                //temObj.value =parseFloat((userValue/baseValue).toFixed(2));//toFixed保留几位小数                temObj.name = "总流量";                dataArray.push(temObj);                options.series[0].data = dataArray;                gaugeDataChart.hideLoading();                gaugeDataChart.setOption(options);            }        },        error : function(errorMsg) {            //alert(errorMsg.error);            gaugeDataChart.hideLoading();            return;        }    });    //*/}//注册鼠标悬浮到扇形上时的事件/*/function onCircleMouseOver(e){    //alert(e.className);    var tolerance =Math.pow(10,-4);    var latlng = e.latlng;    var lengthHeatMap = heatMap.length;    for (var i=0;i<lengthHeatMap;i++){        var name = heatMap[i].name;        var latHeatMap = heatMap[i].lat;        var lngHeatMap = heatMap[i].lng;        if (Math.abs(latlng.lat-latHeatMap)<tolerance && Math.abs(latlng.lng-lngHeatMap<tolerance)){            var popupName = L.popup()                .setLatLng(latlng)                .setContent(name);            popupName.openOn(map);            break;        }    }}//*///添加扇形区域图层function addDistrictsLayerSector(){    var lengthHeatMap = heatMap.length;    var nameDistricts =[];    for (var i=0;i<lengthHeatMap;i++){        var valueHeatMap = heatMap[i].value;        var latHeatMap = heatMap[i].lat;        var lngHeatMap = heatMap[i].lng;        //var latlng = [latHeatMap,lngHeatMap];//不产生随机坐标,用原坐标绘制扇形        var name = heatMap[i].name;        nameDistricts.push(name);        var lacci = heatMap[i].lacci;        //根据小区原坐标产生随机坐标        var latMin = parseFloat(latHeatMap)-0.0001,            latMax = parseFloat(latHeatMap)+0.0001,            lngMin = parseFloat(lngHeatMap)-0.0001,            lngMax = parseFloat(lngHeatMap)+0.0001;        var latlng = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);        //*/        var polygon = null;        //var strHeatDiscritsName = heatMap[i].strHeatDiscritsName;        var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(30, 0),closeButton:true, closeOnClick:false})           .setLatLng(latlng);        var testHtml = "propertyPerformance.html?"+name;        heatPopup.setContent("<iframe width=550px frameborder=no height=300px src="+testHtml+"></iframe>");        if(valueHeatMap>=0 && valueHeatMap<Math.ceil(aveHeatValue/4)){        //if(valueHeatMap>=Math.ceil(max/6) && valueHeatMap<Math.ceil(max/5)){            //var fillColor = getColor(1);            var radius =180;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#0000FF',                fillOpacity: 0.5,                color: '#0000FF',                opacity: 0.9,                startAngle: 330,                stopAngle: 30            }).bindPopup(heatPopup).addTo(districtsLayer);        }        if(valueHeatMap>=Math.ceil(aveHeatValue/4) && valueHeatMap<Math.ceil(2*aveHeatValue/4)){        //if(valueHeatMap>=Math.ceil(max/5) && valueHeatMap<Math.ceil(max/4)){            //var fillColor = getColor(2);            var radius =160;            polygon=L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#00FF00',                fillOpacity: 0.6,                color: '#00FF00',                opacity: 0.9,                startAngle: 90,                stopAngle: 150            }).bindPopup(heatPopup).addTo(districtsLayer);        }        if(valueHeatMap>=Math.ceil(aveHeatValue*2/4) && valueHeatMap<Math.ceil(aveHeatValue*3/4)){        //if(valueHeatMap>=Math.ceil(max/4) && valueHeatMap<Math.ceil(max/3)){            //var fillColor = getColor(3);            var radius =140;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#FFFF00',                fillOpacity: 0.7,                color: '#FFFF00',                opacity: 0.9,                startAngle: 210,                stopAngle: 270            }).bindPopup(heatPopup).addTo(districtsLayer);        }        if(valueHeatMap>=Math.ceil(aveHeatValue*3/4) && valueHeatMap<aveHeatValue){        //if(valueHeatMap>=Math.ceil(max/3) && valueHeatMap<Math.ceil(max/2)){            //var fillColor = getColor(4);            var radius =120;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#F08080',                fillOpacity: 0.8,                color: '#F08080',                opacity: 0.9,                startAngle: 330,                stopAngle: 30            }).bindPopup(heatPopup).addTo(districtsLayer);        }        if(valueHeatMap>=aveHeatValue){        //if(valueHeatMap>= Math.ceil(max/2)){            //var fillColor = getColor(5);            var radius =100;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#FF0000',                fillOpacity: 1,                color: '#FF0000',                opacity: 1,                startAngle: 90,                stopAngle: 150            }).bindPopup(heatPopup).addTo(districtsLayer);        }    }    map.addLayer(districtsLayer);    switchControl.addOverlay(districtsLayer,"小区图层");    ifDistrictsLayer=true;    //districtsLayer.bringToFront();    //注册鼠标悬浮小区时的title事件    var j=0;    districtsLayer.eachLayer(function (layer) {        var nameHeat = nameDistricts[j];        //鼠标悬浮小区要素时的提示信息        layer.on('mouseover', function(e){            var hover_bubble = new L.Rrose({ offset: new L.Point(0,-10),closeOnClick:true, closeButton: false, autoPan: false })                .setContent(nameHeat)                .setLatLng(e.latlng)                .openOn(map);        });        layer.on('mouseout', function(e){            map.closePopup();        });        //*/        //绑定右键菜单        layer.bindContextMenu({            contextmenu: true,            contextmenuItems: [                {                    text: '查看详情',                    callback: function () {                        layer.openPopup();                    }                }            ]        });        //*/        j=j+1;    });    //*/}//添加3D曲线区域图层function addDistrictsLayerLine3D(){    var lengthHeatMap = heatMap.length;    var nameDistricts =[];    for (var i=0;i<lengthHeatMap;i++){        var valueHeatMap = heatMap[i].value;        var latHeatMap = heatMap[i].lat;        var lngHeatMap = heatMap[i].lng;        //var latlng = [latHeatMap,lngHeatMap];//不产生随机坐标,用原坐标绘制扇形        var name = heatMap[i].name;        nameDistricts.push(name);        var lacci = heatMap[i].lacci;        //根据小区原坐标产生随机坐标        var latMin = parseFloat(latHeatMap)-0.008,            latMax = parseFloat(latHeatMap)+0.008,            lngMin = parseFloat(lngHeatMap)-0.008,            lngMax = parseFloat(lngHeatMap)+0.008;        var latlng = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);        //*/        var polygon = null;        //var strHeatDiscritsName = heatMap[i].strHeatDiscritsName;        var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(10, 0),closeButton:true, closeOnClick:false})            .setLatLng(latlng);        var testHtml = "propertyPerformance.html?"+name;        heatPopup.setContent("<iframe width=540px frameborder=no height=290px src="+testHtml+"></iframe>");        if(valueHeatMap>=0 && valueHeatMap<Math.ceil(aveHeatValue/4)){            //if(valueHeatMap>=Math.ceil(max/6) && valueHeatMap<Math.ceil(max/5)){            //var fillColor = getColor(1);            var radius =180;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#0000FF',                fillOpacity: 0.5,                color: '#0000FF',                opacity: 0.9,                startAngle: 330,                stopAngle: 30            }).bindPopup(heatPopup).addTo(districtsLayer);            var arcedPolyline = new L.ArcedPolyline([locBoundArced,latlng], {                distanceToHeight: new L.LinearFunction([0, 5], [500, 500]),                color: '#0000FF',                weight: 3            }).addTo(arcedPolylineLayer);        }        if(valueHeatMap>=Math.ceil(aveHeatValue/4) && valueHeatMap<Math.ceil(2*aveHeatValue/4)){            //if(valueHeatMap>=Math.ceil(max/5) && valueHeatMap<Math.ceil(max/4)){            //var fillColor = getColor(2);            var radius =160;            polygon=L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#00FF00',                fillOpacity: 0.6,                color: '#00FF00',                opacity: 0.9,                startAngle: 90,                stopAngle: 150            }).bindPopup(heatPopup).addTo(districtsLayer);            var arcedPolyline = new L.ArcedPolyline([locBoundArced,latlng], {                distanceToHeight: new L.LinearFunction([0, 5], [800, 800]),                color: '#00FF00',                weight: 3            }).addTo(arcedPolylineLayer);        }        if(valueHeatMap>=Math.ceil(aveHeatValue*2/4) && valueHeatMap<Math.ceil(aveHeatValue*3/4)){            //if(valueHeatMap>=Math.ceil(max/4) && valueHeatMap<Math.ceil(max/3)){            //var fillColor = getColor(3);            var radius =140;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#FFFF00',                fillOpacity: 0.7,                color: '#FFFF00',                opacity: 0.9,                startAngle: 210,                stopAngle: 270            }).bindPopup(heatPopup).addTo(districtsLayer);            var arcedPolyline = new L.ArcedPolyline([locBoundArced,latlng], {                distanceToHeight: new L.LinearFunction([0, 5], [1100, 1100]),                color: '#FFFF00',                weight: 3            }).addTo(arcedPolylineLayer);        }        if(valueHeatMap>=Math.ceil(aveHeatValue*3/4) && valueHeatMap<aveHeatValue){            //if(valueHeatMap>=Math.ceil(max/3) && valueHeatMap<Math.ceil(max/2)){            //var fillColor = getColor(4);            var radius =120;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#F08080',                fillOpacity: 0.8,                color: '#F08080',                opacity: 0.9,                startAngle: 330,                stopAngle: 30            }).bindPopup(heatPopup).addTo(districtsLayer);            var arcedPolyline = new L.ArcedPolyline([locBoundArced,latlng], {                distanceToHeight: new L.LinearFunction([0, 5], [1400, 1400]),                color: '#F08080',                weight: 3            }).addTo(arcedPolylineLayer);        }        if(valueHeatMap>=aveHeatValue){            //if(valueHeatMap>= Math.ceil(max/2)){            //var fillColor = getColor(5);            var radius =100;            L.circle(latlng, radius, {                fill: true,                weight:1,                className:name,                fillColor:'#FF0000',                fillOpacity: 1,                color: '#FF0000',                opacity: 1,                startAngle: 90,                stopAngle: 150            }).bindPopup(heatPopup).addTo(districtsLayer);            var arcedPolyline = new L.ArcedPolyline([locBoundArced,latlng], {                distanceToHeight: new L.LinearFunction([0, 5], [1700, 1700]),                color: '#FF0000',                weight: 3            }).addTo(arcedPolylineLayer);        }    }    map.addLayer(districtsLayer);    switchControl.addOverlay(districtsLayer,"小区图层");    map.addLayer(arcedPolylineLayer);    switchControl.addOverlay(arcedPolylineLayer,"树型渲染图");    ifDistrictsLayer=true;    //districtsLayer.bringToFront();    //注册鼠标悬浮小区时的title事件    var j=0;    districtsLayer.eachLayer(function (layer) {        var nameHeat = nameDistricts[j];        //鼠标悬浮小区要素时的提示信息        layer.on('mouseover', function(e){            var hover_bubble = new L.Rrose({ offset: new L.Point(0,-10),closeOnClick:true, closeButton: false, autoPan: false })                .setContent(nameHeat)                .setLatLng(e.latlng)                .openOn(map);        });        layer.on('mouseout', function(e){            //map.closePopup();        });        //*/        //绑定右键菜单        layer.bindContextMenu({            contextmenu: true,            contextmenuItems: [                {                    text: '查看详情',                    callback: function () {                        layer.openPopup();                    }                }            ]        });        //*/        j=j+1;    });    //*/}function addDistrictsLayer(){    detailedInfoVector = [];    var lengthHeatMap = heatMap.length;    var nameDistricts =[];    for (var i=0;i<lengthHeatMap;i++){        var valueHeatMap = heatMap[i].value;        var latHeatMap = heatMap[i].lat;        var lngHeatMap = heatMap[i].lng;        //var latlng = [latHeatMap,lngHeatMap];//不产生随机坐标,用原坐标绘制扇形        var name = heatMap[i].name;        nameDistricts.push(name);        var lacci = heatMap[i].lacci;        var type = heatMap[i].type;        /*/根据小区原坐标产生随机坐标        var latMin = parseFloat(latHeatMap)-0.002,            latMax = parseFloat(latHeatMap)+0.002,            lngMin = parseFloat(lngHeatMap)-0.002,            lngMax = parseFloat(lngHeatMap)+0.002;        var latlng = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);        //*/        var latlng = L.latLng(latHeatMap,lngHeatMap);        //为detailedeInfoVector数组赋值        var temObj = {};        temObj.point = latlng;        temObj.name = name;        temObj.type = type;        temObj.id = lacci;        temObj.lacci = lacci;        detailedInfoVector.push(temObj);        //var strHeatDiscritsName = heatMap[i].strHeatDiscritsName;        //var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})        //    .setLatLng(latlng);        //var testHtml = "propertyPerformance.html?"+encodeURIComponent(name);        //heatPopup.setContent("<iframe width=550px frameborder=no height=300px src="+testHtml+"></iframe>");        //为小区绑定popup        var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})            .setLatLng(latlng);        heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lacci+"!"+encodeURIComponent(heatIndexDis) + "&" + encodeURIComponent(name) +'></iframe>');        if(type === '4G'){            //if(valueHeatMap>=0 && valueHeatMap<Math.ceil(aveHeatValue/4)){            if(valueHeatMap>=0 && valueHeatMap<100){                var marker = L.marker(latlng,{title: name, icon: blue4G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer4G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(aveHeatValue/4) && valueHeatMap<Math.ceil(2*aveHeatValue/4)){            if(valueHeatMap>=100 && valueHeatMap<200){                var marker = L.marker(latlng,{title: name, icon: green4G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer4G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(2*aveHeatValue/4) && valueHeatMap<Math.ceil(3*aveHeatValue/4)){            if(valueHeatMap>=200 && valueHeatMap<300){                var marker = L.marker(latlng,{title: name, icon: yellow4G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer4G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(3*aveHeatValue/4) && valueHeatMap<Math.ceil(4*aveHeatValue/4)){            if(valueHeatMap>=300 && valueHeatMap<400){                var marker = L.marker(latlng,{title: name, icon: pink4G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer4G.addLayer(marker);            }            if(valueHeatMap>=400){                var marker = L.marker(latlng,{title: name, icon: red4G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer4G.addLayer(marker);            }        }        else if(type === '3G'){            //if(valueHeatMap>=0 && valueHeatMap<Math.ceil(aveHeatValue/4)){            if(valueHeatMap>=0 && valueHeatMap<100){                var marker = L.marker(latlng,{title: name, icon: blue3G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer3G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(aveHeatValue/4) && valueHeatMap<Math.ceil(2*aveHeatValue/4)){            if(valueHeatMap>=100 && valueHeatMap<200){                var marker = L.marker(latlng,{title: name, icon: green3G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer3G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(2*aveHeatValue/4) && valueHeatMap<Math.ceil(3*aveHeatValue/4)){            if(valueHeatMap>=200 && valueHeatMap<300){                var marker = L.marker(latlng,{title: name, icon: yellow3G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer3G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(3*aveHeatValue/4) && valueHeatMap<Math.ceil(4*aveHeatValue/4)){            if(valueHeatMap>=300 && valueHeatMap<400){                var marker = L.marker(latlng,{title: name, icon: pink3G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer3G.addLayer(marker);            }            if(valueHeatMap>=400){                var marker = L.marker(latlng,{title: name, icon: red3G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer3G.addLayer(marker);            }        }        else{            //if(valueHeatMap>=0 && valueHeatMap<Math.ceil(aveHeatValue/4)){            if(valueHeatMap>=0 && valueHeatMap<100){                var marker = L.marker(latlng,{title: name, icon: blue2G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer2G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(aveHeatValue/4) && valueHeatMap<Math.ceil(2*aveHeatValue/4)){            if(valueHeatMap>=100 && valueHeatMap<200){                var marker = L.marker(latlng,{title: name, icon: green2G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer2G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(2*aveHeatValue/4) && valueHeatMap<Math.ceil(3*aveHeatValue/4)){            if(valueHeatMap>=200 && valueHeatMap<300){                var marker = L.marker(latlng,{title: name, icon: yellow2G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer2G.addLayer(marker);            }            //if(valueHeatMap>=Math.ceil(3*aveHeatValue/4) && valueHeatMap<Math.ceil(4*aveHeatValue/4)){            if(valueHeatMap>=300 && valueHeatMap<400){                var marker = L.marker(latlng,{title: name, icon: pink2G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer2G.addLayer(marker);            }            if(valueHeatMap>=400){                var marker = L.marker(latlng,{title: name, icon: red2G,keepInView:true});                marker.bindPopup(heatPopup);                districtsLayer2G.addLayer(marker);            }        }    }    var id2G = districtsLayer2G._leaflet_id,//保证图层控制器中小区图层的加载顺序        id3G = districtsLayer3G._leaflet_id,        id4G = districtsLayer4G._leaflet_id;    var temId;    if(id2G < id4G){        temId = id2G;        id2G = id4G;        id4G = temId;    }    if(id2G < id3G){        temId = id2G;        id2G = id3G;        id3G = temId;    }    districtsLayer2G._leaflet_id = id2G;    districtsLayer3G._leaflet_id = id3G;    districtsLayer4G._leaflet_id = id4G;    map.addLayer(districtsLayer4G);    switchControl.addOverlay(districtsLayer4G,"4G小区");    map.addLayer(districtsLayer3G);    switchControl.addOverlay(districtsLayer3G,"3G小区");    map.addLayer(districtsLayer2G);    switchControl.addOverlay(districtsLayer2G,"2G小区");    var subwaymMrker = L.marker([31.2331145,121.46574497],{title: '人民广场地铁站入口', icon: subway,keepInView:true});    var subwayPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})        .setLatLng(latlng);    subwayPopup.setContent('<iframe width="700px" frameborder=no height="500px" src='+"http://" +baseUrl+":8080/inas_gis/MetroLine.html"  +'></iframe>');    //marker.bindPopup(subwayPopup);    subwaymMrker.on('click',function(){        window.open ("http://" +baseUrl+":8080/inas_gis/MetroLine.html", '_blank', 'height=600, width=1000, top=50,left=300, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no');    });    districtsLayer.addLayer(subwaymMrker);    //switchControl.addOverlay(districtsLayer,"地铁入口");    map.addLayer(districtsLayer);    ifDistrictsLayer=true;}//添加小区区域图层//添加热点图例function getColor(d) {    return d < 0 ? '#FFFFFF' :        d <= 1 ? '#0000FF' :            d <= 2 ? '#00FF00' :                d <= 3 ? '#FFFF00' :                    d <= 4 ? '#F08080' :                        d <= 5 ? '#FF0000' : '#FF0000';}function addLegend(max,min,ave){    if(heatMapLegend == true){        map.removeControl(legend);        heatMapLegend = false;    }    //var minusValue = Math.ceil(max - min);    //alert(min);    //var ave = Math.ceil(minusValue/4);    //var lengthHeatMap = Math.ceil(heatMap.length/5);    legend.onAdd = function (map) {        var div = L.DomUtil.create('div', 'info legend'),            //grades = [0, Math.ceil(ave/4), Math.ceil(2*ave/4), Math.ceil(3*ave/4), ave],            //grades = [Math.ceil(max/6), Math.ceil(max/5), Math.ceil(max/4), Math.ceil(max/3), Math.ceil(max/2)],            grades = [0, 100, 200, 300, 400],            labels = [],            from, to;        //labels.push("<b>使用业务用户数:</b>"+'</br>');        //labels.push("<b style='background-color: #B0E0E6'> &nbsp"+heatIndexName+"：</b>");        for (var i = 0; i < grades.length; i++) {            from = grades[i];            to = grades[i + 1];            labels.push(                '<b style="background:' + getColor(i + 1) + '">'+'&nbsp'+from + (to ? '&ndash;' + to : '+'))+'</b> ' ;//字体颜色在b标签中设置        }        //div.innerHTML = labels.join('<br>');        div.innerHTML = labels.join('&nbsp');        return div;    };    legend.addTo(map);    heatMapLegend = true;    addDistrictsLayer();//添加区域图层}//*/function heatMapRender () {    if (map.hasLayer(heatMapLayer)){        switchControl.removeLayer(heatMapLayer);        map.removeLayer(heatMapLayer);    }    //console.log('热力图' + new Date().toLocaleTimeString());    //if(heatMap.length ==0){    //    alert("暂无数据，请稍后再试！");    //    return;   // }    var testData = new Object();    var cfg = {        // radius should be small ONLY if scaleRadius is true (or small radius is intended)        "radius": 0.003,        "maxOpacity": .6,        // scales the radius based on map zoom        "scaleRadius": true,        // if set to false the heatmap uses the global maximum for colorization        // if activated: uses the data maximum within the current map boundaries        //   (there will always be a red spot with useLocalExtremas true)        "useLocalExtrema": true,        // which field name in your data represents the latitude - default "lat"        latField: 'lat',        // which field name in your data represents the longitude - default "lng"        lngField: 'lng',        // which field name in your data represents the data value - default "value"        valueField: 'value'    };    /*/剔除heatMap中重复的点    var arrHeat = [];    for (var j=0; j<heatMap.length; j++){            arrHeat.push(heatMap[j]);    }    //*/    maxHeatValue=0;    minHeatValue=0;    var sum =0;    for (var i= 0,len =heatMap.length; i<len; i++){        var temVal = heatMap[i].value;        var lat = heatMap[i].lat,            lng = heatMap[i].lng;        if(!isNumber(temVal)){            //heatMap.splice(i,1);            heatMap[i].value = 0;            //break;        }        sum = sum + heatMap[i].value;        if (maxHeatValue < temVal){            maxHeatValue = temVal;        }        if (minHeatValue > temVal){            minHeatValue = temVal;        }    }    aveHeatValue = Math.ceil(sum/heatMap.length);    //alert(aveHeatValue);    //alert(heatMap.length);    testData={max: maxHeatValue, min: minHeatValue, data: heatMap};    heatMapLayer = new HeatmapOverlay(cfg);    map.addLayer(heatMapLayer);    heatMapLayer.setData(testData);    switchControl.addOverlay(heatMapLayer,"热点渲染图");    //heatMapLayer.bringToBack();    ifHeatMapLayer=true;    //alert(maxHeatValue);    //alert(minHeatValue);    addLegend(maxHeatValue,minHeatValue,aveHeatValue);//添加热点图例    $('#divWhoise').hide();}//判断对象是否是数组function isArray(arg){    return Object.prototype.toString.call(arg) === '[object Array]';}//判断对象是否为空function isEmpty(obj){    for (var name in obj)    {        return false;    }    return true;};function addHeatMap(url, loc,lacci,name,type){    //为热点图数组赋值    $.getJSON(url, function (jsonData) {        //var jsonData = $.parseJSON(objJson.responseText);        for(var str in jsonData){            if(!str ){                return;            }            else{                var lengthRows=jsonData[str].length;                //alert(lengthRows);                if(lengthRows>3){                    var heatMapData = new Object();                    var value2G= 0,                        value3G= 0,                        value4G=0;                    value2G = jsonData[str][lengthRows-7]['2G'];                    value3G = jsonData[str][lengthRows-7]['3G'];                    value4G = jsonData[str][lengthRows-7]['4G'];                    //var heatValue = value2G +value3G +value4G;//需要渲染的字段                    var heatValue = jsonData[str][lengthRows-4].total;                    heatMapData.value = heatValue;                    heatMapData.lat = loc.lat;                    heatMapData.lng = loc.lng;                    heatMapData.lacci = lacci;                    heatMapData.name = name;                    heatMapData.type = type;                    //heatMapData.strHeatDiscritsName = strHeatDiscritsName;                    heatMap.push(heatMapData);                }                /*/                else if (lengthRows>0){                    var heatMapData = new Object();                    var value2G= 0,                        value3G= 0,                        value4G=0;                    value2G = jsonData[str][0]['2G'];                    value3G = jsonData[str][0]['3G'];                    value4G = jsonData[str][0]['4G'];                    //var heatValue = value2G +value3G +value4G;//需要渲染的字段                    var heatValue = jsonData[str][0].total;                    //alert(heatValue);                    heatMapData.value = heatValue;                    heatMapData.lat = loc.lat;                    heatMapData.lng = loc.lng;                    heatMapData.lacci = lacci;                    heatMapData.name = name;                    heatMapData.type = type;                    //heatMapData.strHeatDiscritsName = strHeatDiscritsName;                    heatMap.push(heatMapData);                }                //*/                //热力图渲染                if(heatMap.length === lengthTem){                    if(heatMap.length ==0){                        alert("暂无数据，请稍后再试！");                        return;                    }                    else{                        heatMapRender();                    }                }                //热力图回放数据保存                var siteHeat = [];                for(var i= 0, len = jsonData[str].length; i<len; ++i){                    var temObj = {                        lac: lacci,                        time: jsonData[str][i].time,                        lat: loc.lat,                        lng: loc.lng,                        value: jsonData[str][i].total                    };                    siteHeat.push(temObj);                }                resultHeat.push(siteHeat);            }        }    });}function addMarkerClusters1(url,indexValue){    heatMap = []; //全局变量,存放热点图的数据    temHeatMap = [];//构造heatMap时的临时全局变量    resultHeat = [];    $.getJSON(url,function(data){        //var data = $.parseJSON(objJSON.responseText);        if(isEmpty(data)){            //alert("暂无数据，请稍后再试！");            return;        }        var length=data.rows.length;        for (var i=0;i<length;i++){            //先添加对应的热点图            if (data.rows[i].cellLatitude !="" && data.rows[i].cellLongitude != ""){                var point = L.latLng(data.rows[i].cellLatitude, data.rows[i].cellLongitude);                var latHeatMap = data.rows[i].cellLatitude,                    lngHeatMap = data.rows[i].cellLongitude;                var lac = data.rows[i].lac;                var ci = data.rows[i].ci;                var lacci = lac + ':' + ci;                //根据小区原坐标产生随机坐标                var latMin = parseFloat(latHeatMap)-0.002,                    latMax = parseFloat(latHeatMap)+0.002,                    lngMin = parseFloat(lngHeatMap)-0.002,                    lngMax = parseFloat(lngHeatMap)+0.002;                //var point = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);                if(indexValue === '业务用户数'){                    urlHeatMap = "http://"+baseUrl+":8080/stream/usernum/sites?hours=6&site="+encodeURIComponent(lacci);                }                else{                    urlHeatMap = "http://"+baseUrl+":8080/stream/totalnum/sites?hours=6&site="+encodeURIComponent(lacci);                }                //urlHeatMapArr.push(urlHeatMap);                //添加聚合                var nameDistrict = "";                nameDistrict = "热点名称: " + data.rows[i].businessCirclesName + "<br />" + "小区名称: " + data.rows[i].cellName + "<br />" + "用户类型: " + data.rows[i].cellNt + "<br />";                var popupContent = data.rows[i].cellName;                var typeMarker = data.rows[i].cellNt;                //var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(30, 0),closeButton:true, closeOnClick:false})                    //.setLatLng(point);                //var testHtml = "sitePieCharts.html?"+lacci+"!"+strHeatDiscritsName;                //heatPopup.setContent('<iframe width="560px" frameborder=no height="360px" src="sitePieCharts.html?"></iframe>');                //heatPopup.setContent("<iframe width=560px frameborder=no height=360px src="+testHtml+"></iframe>");                var temObj = new Object();                temObj.url = urlHeatMap;                temObj.loc = point;                temObj.lacci = lacci;                temObj.name = popupContent;                temObj.type = typeMarker;                //temObj.strHeatDiscritsName = strHeatDiscritsName;                temHeatMap.push(temObj);            }        }        lengthTem = temHeatMap.length;        //alert(lengthTem);        for(var j=0;j<lengthTem;j++) {            var url = temHeatMap[j].url;            var loc = temHeatMap[j].loc;            var lacci = temHeatMap[j].lacci;            var name = temHeatMap[j].name;            var type = temHeatMap[j].type;            //var strVHeatDiscritsName = temHeatMap[j].strHeatDiscritsName;            //var str = temHeatMap[j].lacci.toString();            addHeatMap(url,loc,lacci,name,type);        }    });    //map.addLayer(markerClusters);    //switchControl.addOverlay(markerClusters,"小区分布");    //ifMarkersCluster=true;    /*/待获取到数据之后再执行    setTimeout(function(){        map.addLayer(markerClusters);        switchControl.addOverlay(markerClusters,"小区分布");    },2000)    //*/}function addMarkerClusters(url,indexValue){    heatMap = []; //全局变量,存放热点图的数据    resultHeat = [];    //alert(url);    $.ajax({        url: url,        type: 'get',         //数据发送方式        dataType: 'json',     //接受数据格式        contentType: "application/json",        accessType: "application/json",        data:{}    })        .done(function(data){            isEmpty(data) && alert('暂无数据!');            for(var i= 0, len = data.rows.length; i<len;++i){                if (data.rows[i].cellLatitude !="" && data.rows[i].cellLongitude != "") {                    var latHeatMap = parseFloat(data.rows[i].cellLatitude),                        lngHeatMap = parseFloat(data.rows[i].cellLongitude);                    //var point = L.latLng(latHeatMap,lngHeatMap);                    //根据小区原坐标产生随机坐标                    if(isNumber(latHeatMap) && isNumber(lngHeatMap)){                        var latMin = latHeatMap-0.0008,                            latMax = latHeatMap+0.0008,                            lngMin = lngHeatMap-0.0008,                            lngMax = lngHeatMap+0.0008;                        var point = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);                        var lac = data.rows[i].lac;                        var ci = data.rows[i].ci;                        var lacci = lac + ':' + ci;                        var name = data.rows[i].cellName;                        var type = data.rows[i].cellNt;                        var temObj = {                            lacci: lacci,                            name: name,                            lat: point.lat,                            lng: point.lng,                            type: type                        };                        heatMap.push(temObj);                        //resultHeat.push(temObj);                    }                    else{                        continue;                    }                }            }            addResultNow(heatMap);//当前热力图渲染        });    customHeatName = heatIndexDis;    //addTrendPlotFromChild(customHeatName);}//获得当前时间倒推n分钟function getCurrentTimeMin(n){    var nowDate = new Date();    var min = nowDate.getMinutes(),        hour = nowDate.getHours(),        date = nowDate.getDate(),        month = nowDate.getMonth() + 1 ,        year = nowDate.getFullYear();    //min<n && (hour -= 1, min = min + 60 - n);    if(hour === 0){        hour += 24;    }    if(min<n){        hour -= 1;        //if(hour<0) hour += 1;        min = min + 60 - n;    }    min<n || ( min -= n);    if(hour === 24){        hour = 0;    }    var result = year + '-' + month + '-' + date + ' ' + hour + ':' + min + ':' + '00';    //console.log(result)    return result;}//获得当前时间倒推n小时function getCurrentTimeHour(n){    var nowDate = new Date();    var min = nowDate.getMinutes(),        hour = nowDate.getHours(),        date = nowDate.getDate(),        month = nowDate.getMonth() + 1 ,        year = nowDate.getFullYear();    //var hour = 2;    if(hour < n){        hour += 24;    }    hour -= n;    if(hour === 24) {        hour = 0;    }    if(min <10){        min = '0' + min;        if(hour <0){            hour = 0;        }    }    var result = year + '-' + month + '-' + date + ' ' + hour + ':' + min + ':' + '00';    //console.log(result)    return result;}//当前热力图渲染function addResultNow(arr){    var time = getCurrentTimeMin(15);//当前热力图渲染时间    var url;    //console.log('一般' + new Date().toLocaleTimeString());    heatMap = [];    heatIndexName === '信令用户数' && (url = 'http://' + baseUrl + ':8080/stream/totalnum/sites?time=' + time + '&hotspot=' + encodeURIComponent(heatIndexDis));    heatIndexName === '业务用户数' && (url = 'http://' + baseUrl + ':8080/stream/usernum/sites?time=' + time + '&hotspot=' + encodeURIComponent(heatIndexDis));    $.ajax({        url: url,        type: 'get',         //数据发送方式        dataType: 'json',     //接受数据格式        contentType: "application/json",        accessType: "application/json",        data:{}    })        .done(function(data){            //console.log(url);            for(var name in data){                if(data.hasOwnProperty(name)){                    for(var i= 0, len=arr.length; i<len; ++i){                        if(name === arr[i].lacci){                            var value = data[name].total;                            if(value !== undefined){                                arr[i].value = value;                            }                            else{                                arr[i].value = 0;                            }                            break;                        }                        else{                            continue;                        }                    }                }            }            heatMap = arr;            heatMapRender();            //addPlayHeatMap();//获取热力图回放时的数据            //定时刷新热力图            setTimeout(function(){                //callHeatDistricts(heatIndexDis,heatIndexName);                //console.log('定时器' + new Date().toLocaleTimeString());                ifRemove = true;                ifRefresh = true;                removePopup();                //console.log(heatMap);                //reloadMenu();                addResultNow(heatMap);                //setTimeout(arguments.callee,timeRefresh);                //console.log(heatIndexDis,heatIndexName);            },timeRefresh);        });    //if(customHeatName) {    //    addPlot(customHeatName);    //}}//获取热力图回放数据function addPlayHeatMap(){    resultHeat = [];    var n = 7;    callData(n);}function callData(n){    var time = getCurrentTimeHour(n);    var url;    heatIndexName === '信令用户数' && (url = 'http://' + baseUrl + ':8080/stream/totalnum/sites?time=' + time + '&hotspot=' + encodeURIComponent(heatIndexDis));    heatIndexName === '业务用户数' && (url = 'http://' + baseUrl + ':8080/stream/usernum/sites?time=' + time + '&hotspot=' + encodeURIComponent(heatIndexDis));    $.ajax({        url: url,        type: 'get',         //数据发送方式        dataType: 'json',     //接受数据格式        contentType: "application/json",        accessType: "application/json",        data:{}    })        .done(function(data){            var temArr = [];            var sum = 0;            //console.log(data);            for(var name in data){                sum++;                if(data.hasOwnProperty(name)){                    for(var i= 0, len=heatMap.length; i<len; ++i){                        if(name == heatMap[i].lacci){                            var value = data[name].total;                            var lat = heatMap[i].lat,                                lng = heatMap[i].lng;                            var time = data[name].time;                            var lacci = heatMap[i].lacci;                            var temObj = {                                lacci: lacci,                                lat: lat,                                lng: lng,                                value: value,                                time: time                            };                            temArr.push(temObj);                            break;                        }                        else{                            continue;                        }                    }                }            }            resultHeat.push(temArr);            //console.log(sum,'heatMap长度:'+heatMap.length);            n -= 1;            if(n>=0){                callData(n);            }            else{                //resultHeat.pop();                return;            }        });}//判断字符是否为整数function isNumber(obj){    //var reg = new RegExp("^[0-9]$");    if ( /^-?\d+$/.test(obj) || /^[0-9]+.?[0-9]*$/.test(obj))    {        //alert(obj+"是数字");        return true;    }    else    {        //alert(obj+"不是数字");        return false;    }}//添加热点区域的详细信息，以饼图形式进行展示function addDetailedHeatDistrict(){    //动态创建DIV    pieDiv=document.createElement("div");    //pieDiv.style.background="pink";    //pieDiv.style.border="1pxsolidred";    pieDiv.style.width="400px";    pieDiv.style.height="400px";    pieDiv.id="pieDivId";    pieDiv.class="pieDivClass";    pieDiv.innerHTML="";    document.body.appendChild(pieDiv);    //ECharts路径配置    require.config({        paths: {            echarts: 'echarts/build/dist'        }    });    //获取数据    var jsondata = [];    $.getJSON("http://"+baseUrl+":8080/stream/ue/hotspot-majors?hotspot=F1%E8%B5%9B%E5%9C%BA&hours=12",function(data){        var lengthRows=data.length;        var renderObject = data[lengthRows-7];//存储指定时间的对象        if (isEmpty(renderObject['4G'])){            alert("暂无数据，请稍后再试");            return;        }        else{            for (var name in renderObject['4G']){                var dataThroughPut = renderObject['4G'][name].ul_bytes/1024/1024;//记录4G流量,单位是MB                dataThroughPut = parseInt(dataThroughPut*100)/100 ;                var testDataObject = new Object();                testDataObject.name = name;                testDataObject.value = dataThroughPut;                jsondata.push(testDataObject);            }            alert (jsondata.length);            //alert(renderObject.time);            alert(lengthRows);        }    });    setTimeout(function(){        // 使用        require(            [                'echarts',                'echarts/chart/pie' // 使用柱状图就加载bar模块，按需加载            ],            function (ec) {                // 基于准备好的dom，初始化echarts图表                var myChart = ec.init(document.getElementById('pieDivId'));                var option = {                    title : {                        text: '热点区域',                        //subtext: '纯属虚构',                        x:'left'                    },                    tooltip : {                        trigger: 'item',                        formatter: "{a} <br/>{b} : {c} ({d}%)"                    },                    calculable : true,                    series : [                        {                            name:'流量消耗(MB):',                            type:'pie',                            radius : '55%',                            center: ['50%', '60%'],                            data:jsondata,                            clickable: true                        }                    ]                };                // 为echarts对象加载数据,并添加单击响应事件                function eConsole(param) {                    var str = param.name + ":" + param.value;                    alert(str);                }                myChart.setOption(option,true);                myChart.on("click", eConsole);            }        );    },10000)}//春节保障//开始查询function beginQuery(){    var time = getCurrentTimeMin(15);    var num = $('#topNum :text').val();    if(num === '' || !isNumber(num)){        alert('未输入TOP，请输入一个整数！');        $("#divWhoise").hide();        return;    }    if(num>1000){        alert('最大查询TOP1000');        return;    }    removePopup();    $("#divWhoise").show();    num = Math.round(num);    returnTopNum = num;    sfData = [];    querySFData = [];    //console.log(time,zbSelected)    var targetUrl = 'http://' + baseUrl + ':8080/stream/rank/grids?time=' + time + '&num=' + num + '&sortKey=' + encodeURIComponent(zbSelected);    //console.log(targetUrl)    $.ajax({        type: 'GET',        url : targetUrl,        dataType: 'JSON',        data: {}    })        .done(function(data){            for(var i= 0, len=data.length; i<len; ++i){                var temObj = {};                if(zbSelected === '总流量'){                    temObj = {                        gridId: data[i].grid,                        data: parseInt(data[i]['4G流量']/1024*100)/100                    };                }                else{                    temObj = {                        gridId: data[i].grid,                        data: data[i]['4G用户数']                    };                }                sfData.push(temObj)            }            //console.log(sfData)            querySGByIds(sfData);            //$("#divWhoise").hide();        });    //setTimeout(beginQuery,1000*60*5);}//根据栅格id，请求服务绘制栅格矩形function querySGByIds(arr){    arr.sort(by('data'));    var temArrId = [],        temArrData = [];    for(var i= 0, len=arr.length; i<len; ++i){        temArrData.push(arr[i].data);        temArrId.push(arr[i].gridId);    }    var strIds = temArrId.join(',');    //console.log(strIds)    var queryUrl = 'http://' + baseUrl + ':8080/services/ws/fast_query/eaebm/kpi/getGridInfoByIds';    $.ajax({        url: queryUrl,        type: 'GET',        dataType: 'json',        data: { "ids": strIds}    })        .done(function(data){            //console.log(data);            var contextArr = [];//按添加栅格的顺序添加右键菜单            var lenTemArrData = temArrData.length;            var max = temArrData[0],                min = temArrData[lenTemArrData - 1];            for(var name in data){                //var markerLatLng = [data[name].latitude_,data[name].longitude_];                var latMax = parseFloat(data[name].latitude_max),                    latMin = parseFloat(data[name].latitude_min),                    lngMax = parseFloat(data[name].longitude_max),                    lngMin = parseFloat(data[name].longitude_min);                if(!isNumber(latMax) || !isNumber(latMin) || !isNumber(lngMax) || !isNumber(lngMin)){                    //console.log('sth');                    continue;                }                var southWestValue = L.latLng(latMin, lngMin),                    northEastValue = L.latLng(latMax, lngMax),                    boundsValue = L.latLngBounds(southWestValue, northEastValue);                var latlng = boundsValue.getCenter();                //获取该栅格的data值                var dataVal = 0;                var num = 0;//记录该值的位置                for(var i= 0,len=arr.length; i<len; ++i){                    if(name === arr[i].gridId){                        dataVal = arr[i].data;                        num = i;                        contextArr.push(name);                        break;                    }                }                //保存信息                var temObj = {                    gridId: name,                    data: dataVal,                    bound: boundsValue,                    center: latlng                };                querySFData.push(temObj);                //设置颜色                var fillColor = getTargetColorSpringFestival(num,dataVal,lenTemArrData);                //console.log(fillColor);                var rasterPolygon = L.rectangle(boundsValue, {                    fill: true,                    fillColor: fillColor,                    fillOpacity: 0.7,                    weight: 1,                    color: fillColor                })                    .addTo(polygonLayer);                var lenDataVal = dataVal.toString().length;                if(lenDataVal > 6){                    //以Icon.lable形式添加标注                    var SweetIcon = L.Icon.Label.extend({                        options: {                            iconUrl: 'images/testBack.png',                            shadowUrl: null,                            iconSize: new L.Point(0.001, 0.001),                            iconAnchor: new L.Point(0, 1),                            labelAnchor: new L.Point(-20, 0),                            wrapperAnchor: new L.Point(12, 13),                            labelClassName: 'sweet-deal-label'                        }                    });                    new L.Marker(                        latlng,                        { icon: new SweetIcon({ labelText:dataVal }) }                    ).addTo(labelLayer);                }                else if(lenDataVal>5){                    //以Icon.lable形式添加标注                    var SweetIcon = L.Icon.Label.extend({                        options: {                            iconUrl: 'images/testBack.png',                            shadowUrl: null,                            iconSize: new L.Point(0.001, 0.001),                            iconAnchor: new L.Point(0, 1),                            labelAnchor: new L.Point(-18, 0),                            wrapperAnchor: new L.Point(12, 13),                            labelClassName: 'sweet-deal-label'                        }                    });                    new L.Marker(                        latlng,                        { icon: new SweetIcon({ labelText:dataVal }) }                    ).addTo(labelLayer);                }                else{                    //以Icon.lable形式添加标注                    var SweetIcon = L.Icon.Label.extend({                        options: {                            iconUrl: 'images/testBack.png',                            shadowUrl: null,                            iconSize: new L.Point(0.001, 0.001),                            iconAnchor: new L.Point(0, 1),                            labelAnchor: new L.Point(-12, 0),                            wrapperAnchor: new L.Point(12, 13),                            labelClassName: 'sweet-deal-label'                        }                    });                    new L.Marker(                        latlng,                        { icon: new SweetIcon({ labelText:dataVal }) }                    ).addTo(labelLayer);                }                //*/            }            //map.setView(latlng,13);            //labelLayer._leaflet_id = 9999999;            map.addLayer(labelLayer);            ifLabel = true;            map.addLayer(polygonLayer);            ifPolygonLayer = true;            addContextMenu(contextArr);            addGridList(querySFData);            addLegendSpringFestival(max,min,lenTemArrData,temArrData);            $("#divWhoise").hide();        })}//添加栅格右键菜单function addContextMenu(arr){    var j = 0;    var k = 0;    polygonLayer.eachLayer(function (layer) {        var idValue = arr[j];        layer.bindContextMenu({            contextmenu: true,            contextmenuItems: [                {                    text: '查看栅格小区 ',                    callback: function(){                        xqData = [];                        detailedInfoVector = [];                        var time = getCurrentTimeMin(15);                        var num = $('#topNum :text').val();                        if(num === '' || !isNumber(num)){                            alert('未输入TOP，请输入一个整数！');                            $("#divWhoise").hide();                            return;                        }                        if(num>1000){                            alert('最大查询TOP1000');                            return;                        }                        num = Math.round(num);                        //移除栅格图层                        if(ifPolygonLayer){                            map.removeLayer(polygonLayer);                            //switchControl.removeLayer(polygonLayer);                            polygonLayer.clearLayers();                            ifPolygonLayer=false;                        }                        //移除标注图层                        if (ifLabel){                            map.removeLayer(labelLayer);                            //switchControl.removeLayer(districtsLayer);                            labelLayer.clearLayers();                            ifLabel = false;                        }                        $("#divWhoise").show();                        $.ajax({                            type: 'GET',                            url: 'http://' +baseUrl +':8080/stream/rank/grid-sites?time=' + time +'&num=' + num +'&sortKey=' + encodeURIComponent(zbSelected) + '&grid=' + idValue,                            data: {},                            dataType: 'JSON'                        })                            .done(function(data){                                //console.log(data);                                //console.log('http://' +baseUrl +':8080/stream/rank/grid-sites?time=' + time +'&num=' + num +'&sortKey=' + encodeURIComponent(zbSelected) + '&grid=' + idValue)                                var markerType = '4G';                                for(var i= 0,len=data.length; i<len; ++i){                                    var lat = parseFloat(data[i].latitude),                                        lng = parseFloat(data[i].longitude);                                    if(!isNumber(lat) || !isNumber(lng)){                                        continue;                                    }                                    var latMin = lat - 0.0008,                                        latMax = lat + 0.0008,                                        lngMin = lng - 0.0008,                                        lngMax = lng + 0.0008;                                    var point = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);                                    var popupContent = data[i].name;                                    //var point = [lat,lng];                                    var lac = data[i].site;                                    var dataVal = data[i][zbSelected];                                    if(zbSelected === '总流量'){                                        dataVal = data[i]['4G流量'];                                        dataVal = parseInt(dataVal/1024*100)/100;                                    }                                    else{                                        dataVal = data[i]['4G用户数'];                                    }                                    //框选用                                    var temObjDetailed = {};                                    temObjDetailed.point = point;                                    temObjDetailed.name = popupContent;                                    temObjDetailed.type = '4G';                                    temObjDetailed.id = lac;                                    temObjDetailed.lacci = lac;                                    detailedInfoVector.push(temObjDetailed);                                    var temObj = {                                        lacci: lac,                                        name: popupContent,                                        loc: point,                                        grid: idValue,                                        data: dataVal                                    };                                    xqData.push(temObj);                                    //为小区绑定popup                                    var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                                        .setLatLng(point);                                    heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lac+"!" + idValue + "&" + encodeURIComponent(popupContent) +'></iframe>');                                    var marker = L.marker(point,{title: popupContent, icon: marker4G});                                    marker.bindPopup(heatPopup);                                    districtsLayer.addLayer(marker);                                }                                map.addLayer(districtsLayer);                                ifDistrictsLayer = true;                                addXQList(xqData);                                $("#divWhoise").hide();                            });                        //rectangleHappened = true;                    }                }            ]        });        j = j+1;    });    labelLayer.eachLayer(function (layer) {        var idValue = arr[k];        layer.bindContextMenu({            contextmenu: true,            contextmenuItems: [                {                    text: '查看栅格小区 ',                    callback: function(){                        xqData = [];                        detailedInfoVector = [];                        var time = getCurrentTimeMin(15);                        var num = $('#topNum :text').val();                        if(num === '' || !isNumber(num)){                            alert('未输入TOP，请输入一个整数！');                            $("#divWhoise").hide();                            return;                        }                        if(num>1000){                            alert('最大查询TOP1000');                            return;                        }                        num = Math.round(num);                        //移除栅格图层                        if(ifPolygonLayer){                            map.removeLayer(polygonLayer);                            //switchControl.removeLayer(polygonLayer);                            polygonLayer.clearLayers();                            ifPolygonLayer=false;                        }                        //移除标注图层                        if (ifLabel){                            map.removeLayer(labelLayer);                            //switchControl.removeLayer(districtsLayer);                            labelLayer.clearLayers();                            ifLabel = false;                        }                        $("#divWhoise").show();                        $.ajax({                            type: 'GET',                            url: 'http://' +baseUrl +':8080/stream/rank/grid-sites?time=' + time +'&num=' + num +'&sortKey=' + encodeURIComponent(zbSelected) + '&grid=' + idValue,                            data: {},                            dataType: 'JSON'                        })                            .done(function(data){                                //console.log(data);                                //console.log('http://' +baseUrl +':8080/stream/rank/grid-sites?time=' + time +'&num=' + num +'&sortKey=' + encodeURIComponent(zbSelected) + '&grid=' + idValue)                                var markerType = '4G';                                for(var i= 0,len=data.length; i<len; ++i){                                    var lat = parseFloat(data[i].latitude),                                        lng = parseFloat(data[i].longitude);                                    if(!isNumber(lat) || !isNumber(lng)){                                        continue;                                    }                                    var latMin = lat - 0.0008,                                        latMax = lat + 0.0008,                                        lngMin = lng - 0.0008,                                        lngMax = lng + 0.0008;                                    var point = L.latLng(Math.random()*(latMax-latMin)+latMin, Math.random()*(lngMax-lngMin)+lngMin);                                    var popupContent = data[i].name;                                    //var point = [lat,lng];                                    var lac = data[i].site;                                    var dataVal = data[i][zbSelected];                                    if(zbSelected === '总流量'){                                        dataVal = data[i]['4G流量'];                                        dataVal = parseInt(dataVal/1024*100)/100;                                    }                                    else{                                        dataVal = data[i]['4G用户数'];                                    }                                    //框选用                                    var temObjDetailed = {};                                    temObjDetailed.point = point;                                    temObjDetailed.name = popupContent;                                    temObjDetailed.type = '4G';                                    temObjDetailed.id = lac;                                    temObjDetailed.lacci = lac;                                    detailedInfoVector.push(temObjDetailed);                                    var temObj = {                                        lacci: lac,                                        name: popupContent,                                        loc: point,                                        grid: idValue,                                        data: dataVal                                    };                                    xqData.push(temObj);                                    //为小区绑定popup                                    var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                                        .setLatLng(point);                                    heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lac+"!" + idValue + "&" + encodeURIComponent(popupContent) +'></iframe>');                                    var marker = L.marker(point,{title: popupContent, icon: marker4G});                                    marker.bindPopup(heatPopup);                                    districtsLayer.addLayer(marker);                                }                                map.addLayer(districtsLayer);                                ifDistrictsLayer = true;                                addXQList(xqData);                                $("#divWhoise").hide();                            });                        //rectangleHappened = true;                    }                }            ]        });        k += 1;    });}//添加栅格列表function addGridList(arr){    arr.sort(by('data'));    var dataCount = arr.length;    var htmlStr = '';    //添加表头    htmlStr += '<tr>';    htmlStr += '<td><div align="center" style="border: none; background: #E8E8E8; font-size: 20px;width: 150px;border-right: 1px solid gray">栅格ID</div></td>';    if(zbSelected === '总流量'){        htmlStr += '<td><div align="center" style="border: none; background: #E8E8E8; font-size: 20px;width: 110px">' + zbSelected + '(MB)' + '</div></td>';    }    else{        htmlStr += '<td><div align="center" style="border: none; background: #E8E8E8; font-size: 20px;width: 110px">' + zbSelected + '</div></td>';    }    htmlStr += '</tr>';    //添加详细信息    for(var i=0; i<dataCount; ++i){        var gridId = arr[i].gridId;        var gridData = arr[i].data;        htmlStr += '<tr>';        if(i === dataCount - 1){            if(i % 2 !==0){                htmlStr += '<td><div align="center" style="border: none; background: #E8E8E8; font-size: 16px;width: 150px;border-right: 1px solid gray; border-bottom: 1px solid gray;">' + '<a href="#" onclick="locateSG(\''+gridId+'\')">'+ gridId + '</a>' + '</div></td>';                htmlStr += '<td><div align="center" style="border: none; background: #E8E8E8; font-size: 16px;width: 110px; border-bottom: 1px solid gray;">' + gridData + '</div></td>';            }            else{                htmlStr += '<td><div align="center" style="border: none; background: #FFFFFF; font-size: 16px;width: 150px;border-right: 1px solid gray; border-bottom: 1px solid gray;">' + '<a href="#" onclick="locateSG(\''+gridId+'\')">'+ gridId + '</a>' + '</div></td>';                htmlStr += '<td><div align="center" style="border: none; background: #FFFFFF; font-size: 16px;width: 110px; border-bottom: 1px solid gray;">' + gridData + '</div></td>';            }        }        if(i % 2 !==0){            htmlStr += '<td><div align="center" style="border: none; background: #E8E8E8; font-size: 16px;width: 150px;border-right: 1px solid gray">' + '<a href="#" onclick="locateSG(\''+gridId+'\')">'+ gridId + '</a>' + '</div></td>';            htmlStr += '<td><div align="center" style="border: none; background: #E8E8E8; font-size: 16px;width: 110px">' + gridData + '</div></td>';        }        else{            htmlStr += '<td><div align="center" style="border: none; background: #FFFFFF; font-size: 16px;width: 150px;border-right: 1px solid gray">' + '<a href="#" onclick="locateSG(\''+gridId+'\')">'+ gridId + '</a>' + '</div></td>';            htmlStr += '<td><div align="center" style="border: none; background: #FFFFFF; font-size: 16px;width: 110px">' + gridData + '</div></td>';        }        htmlStr += '</tr>';    }    $("#putIndex").html(htmlStr);    var latlng = arr[0].center;    map.setView(latlng,13);}//定位栅格function locateSG(id){    //console.log(id)    for(var i= 0,len=querySFData.length; i<len; ++i){        var gridId = querySFData[i].gridId;        if(gridId === id){            var point = querySFData[i].center;            map.setView(point,16);            break;        }    }}//添加小区列表function addXQList(arr){    arr.sort(by('data'));    var dataCount = arr.length;    var htmlStr = '';    //添加表头    htmlStr += '<tr>';    htmlStr += '<td><div align="center" style="border: none; background-color: #E8E8E8; font-size: 18px;width: 160px;border-right: 1px solid gray">小区名称</div></td>';    if(zbSelected === '总流量'){        htmlStr += '<td><div align="center" style="border: none; background-color: #E8E8E8; font-size: 18px;width: 100px">' + zbSelected + '(MB)' + '</div></td>';    }    else{        htmlStr += '<td><div align="center" style="border: none; background-color: #E8E8E8; font-size: 18px;width: 100px">' + zbSelected + '</div></td>';    }    htmlStr += '</tr>';    //添加详细信息    for(var i=0; i<dataCount; ++i){        var gridId = arr[i].name;//这儿是小区名称        var gridData = arr[i].data;//这儿是小区指标值        var realId = arr[i].grid;//这儿是真正的小区所属栅格ID        if(strlen(gridId) >10) {            var temName = gridId.substring(0,10);        }        else{            var temName = gridId;        }        htmlStr += '<tr>';        if(i === dataCount - 1){            if(i % 2 !==0){                htmlStr += '<td><div align="center" style="border: none; background-color: #E8E8E8; font-size: 16px;width: 160px;border-right: 1px solid gray; border-bottom: 1px solid gray">' + '<a href="#" onclick="locateXQ(\''+gridId+'\')">'+ temName + '</a>' + '</div></td>';                htmlStr += '<td><div align="center" style="border: none; background-color: #E8E8E8; font-size: 16px;width: 100px; border-bottom: 1px solid gray">' + gridData + '</div></td>';            }            else{                htmlStr += '<td><div align="center" style="border: none; background-color: #FFFFFF; font-size: 16px;width: 160px; border-right: 1px solid gray; border-bottom: 1px solid gray">' + '<a href="#" onclick="locateXQ(\''+gridId+'\')">'+ temName + '</a>' + '</div></td>';                htmlStr += '<td><div align="center" style="border: none; background-color: #FFFFFF; font-size: 16px;width: 100px; border-bottom: 1px solid gray; ">' + gridData + '</div></td>';            }            htmlStr += '</tr>';            break;        }        if(i % 2 !==0){            htmlStr += '<td><div align="center" style="border: none; background-color: #E8E8E8; font-size: 16px;width: 160px;border-right: 1px solid gray">' + '<a href="#" onclick="locateXQ(\''+gridId+'\')">'+ temName + '</a>' + '</div></td>';            htmlStr += '<td><div align="center" style="border: none; background-color: #E8E8E8; font-size: 16px;width: 100px">' + gridData + '</div></td>';        }        else{            htmlStr += '<td><div align="center" style="border: none; background-color: #FFFFFF; font-size: 16px;width: 160px;border-right: 1px solid gray">' + '<a href="#" onclick="locateXQ(\''+gridId+'\')">'+ temName + '</a>' + '</div></td>';            htmlStr += '<td><div align="center" style="border: none; background-color: #FFFFFF; font-size: 16px;width: 100px">' + gridData + '</div></td>';        }        htmlStr += '</tr>';    }    $("#putIndex").html(htmlStr);}//定位小区function locateXQ(name){    //移除临时图层    if (ifTemLayer){        map.removeLayer(temLayer);        //switchControl.removeLayer(districtsLayer);        temLayer.clearLayers();        ifTemLayer=false;    }    for(var i= 0,len=xqData.length; i<len; ++i){        var xqName = xqData[i].name;        if(xqName === name){            var point = xqData[i].loc;            var lac = xqData[i].lacci,                idValue = xqData[i].grid,                popupContent = xqData[i].name;            //为小区绑定popup            var heatPopup = L.popup({maxWidth:800,maxHeight:800,offset:L.point(0, 5),closeButton:true, closeOnClick:false})                .setLatLng(point);            heatPopup.setContent('<iframe width="480px" frameborder=no height="290px" src='+"sitePieCharts.html?"+lac+"!" + idValue + "&" + encodeURIComponent(popupContent) +'></iframe>');            var marker = L.marker(point,{title: popupContent, riseOnHover: true, icon: marker4GGreen});            marker.bindPopup(heatPopup).addTo(temLayer);            map.addLayer(temLayer);            ifTemLayer = true;            map.setView(point,17);            break;        }    }}//添加春节保障地图的图例function addLegendSpringFestival(max,min,lengthRows,data){    data.sort(function(a,b){        return b-a;    });    //console.log(data);    var classNo = Math.floor(lengthRows/4);//每个区间有几个值,floor向下取整，round四舍五入，ceil向上取整    //找到每个区间的临界值    var linjieValue = [];    linjieValue.push(data[classNo]);    linjieValue.push(data[classNo*2]);    linjieValue.push(data[classNo*3]);    //console.log(linjieValue)    legend.onAdd = function (map) {        var div = L.DomUtil.create('div', 'info legend'),            grades = [data[lengthRows-1], linjieValue[2], linjieValue[1], linjieValue[0]],        //grades = [Math.ceil(max/6), Math.ceil(max/5), Math.ceil(max/4), Math.ceil(max/3), Math.ceil(max/2)],            labels = [],            from, to;        if(zbSelected === '总流量'){            labels.push("<b style='background: ghostwhite'>&nbsp" + zbSelected + "(MB)" + "：</b>");        }        else{            labels.push("<b style='background: ghostwhite'>&nbsp" + zbSelected + "：</b>");        }        /*/换行添加图例        for (var i = 0; i < grades.length; i++) {            from = Math.round(grades[i]);            to = Math.round(grades[i + 1]);            labels.push(                '<i style="background:' + getSpringFestivalColor(i + 1) + '"></i> ' +'&nbsp'+                from + (to ? '&ndash;' + to +'&nbsp'+'&nbsp': '+'));//test ? expression1 : expression2        }        //*/        //单行添加图例        for (var i = 0; i < grades.length; i++) {            from = Math.round(grades[i]);            to = Math.round(grades[i + 1]);            labels.push(                '<b style="background:' + getSpringFestivalColor(i + 1) + '">'+'&nbsp'+from + (to ? '&ndash;' + to : '+'))+'</b> ' ;//字体颜色在b标签中设置        }        //div.innerHTML = labels.join('<br>');        div.innerHTML = labels.join('&nbsp');        return div;    };    legend.addTo(map);    legendControl = true;}//为每个栅格设置颜色function getTargetColorSpringFestival(num,shanGeValue,lengthRows){    var classNo = Math.round(lengthRows / 4);//每个区间有几个值,floor向下取整，round四舍五入，ceil向上取整    var target = parseInt(num)+1;    //console.log(num,shanGeValue)    //var max = parseInt(maxValue);    //var min = parseInt(minValue);    //console.log(target)    if(target>3*classNo){        return "#8bd0f1";    }    if(target>2*classNo && target<= 3*classNo){        return "#d1ec5f";    }    if(target>classNo && target<= 2*classNo){        return "#ffc000";    }    if(target<=classNo){        return "#ff6000";    }}//获取图例颜色值function getSpringFestivalColor(d) {    return d < 0 ? '#8bd0f1' :        d <= 1 ? '#8bd0f1' :            d <= 2 ? '#d1ec5f' :                d <= 3 ? '#ffc000' :                    d <= 4 ? '#ff6000' : '#ff6000';}//对象数组根据某一字段进行排序//自定义排序算法var by = function(name){    return  function(o,p){        var a, b;        if (typeof o === "object"  && typeof p === "object" && o && p) {            a = o[name];            b = p[name];            if (a === b) {                return 0;            }            if (typeof a === typeof b) {                return a > b ? -1 : 1;            }            return typeof a > typeof b ? -1 : 1;        }        else {            throw ("error");        }    }};//计算字符串的长度function strlen(str){    var len = 0;    for (var i=0; i<str.length; i++) {        var c = str.charCodeAt(i);        //单字节加1        if ((c >= 0x0001 && c <= 0x007e) || (0xff60<=c && c<=0xff9f)) {            len++;        }        else {            len+=2;        }    }    return len;}//小程序练习//把字符串的前若干位移动到末尾function reverseString(str,n){    if(str.length < n){        console.log('输入有误，请重新输入');        return;    }    var temStr = str.slice(0,n),        leftStr = str.slice(n);    var resultStr = leftStr + temStr;    return resultStr;}//console.log(reverseString('abcdefabc',3));//字符串的全排列function permuteString(str) {    var input = str.split('');//字符串转换为数组    var permArr = [],        usedChars = [];    function main(input){        var ch;        for (var i=0, len=input.length; i<len; ++i) {            ch = input.splice(i, 1)[0];            usedChars.push(ch);            if (input.length == 0) {                permArr.push(usedChars.slice());            }            //console.log('input before:',input);            main(input);            input.splice(i, 0, ch);            //console.log('input after:',input);            usedChars.pop();        }        return permArr    }    return main(input);};//console.log(permuteString('abcdefg'));//寻找和为定值的两个数function subSame(num, arr){    //arr.sort(function(a,b){return a-b;});    var temArr = [];    for(var i= 0,len=arr.length; i<len; ++i){        temArr.push(num - arr[i]);    }    var resultArr = [];    for(var i= 0,lenI=arr.length; i<lenI; ++i){        for(var j=temArr.length-1; j>=0; --j){            if(arr[i] === temArr[j]){                resultArr.push(arr[i]);                resultArr.push(num - arr[i]);                return resultArr;                //break;            }        }    }    //return resultArr;}//console.log(subSame(12,[6,10,5,8,2]));//预填充数组function preFill(str,num){    if(isNaN(num)){        alert('输入有误，请确认！');        return;    }    var resultArr = [];    for(var i=0; i<num; ++i){        resultArr.push(str);    }    return resultArr;}//console.log(preFill('123','abc'));//求0~total中共有多少个numfunction calSpecificNum(total,num){    var sum = 0;    for(var i=0; i<=total; ++i){        sum += once(i,num);    }    //a中有几个b    function once(a,b){        var all = 0;        var temArr = a.toString().split('');        for(var i= 0,len=temArr.length; i<len; ++i){            if(temArr[i] !== b.toString()) continue;            all += 1;        }        return all;    }    return sum;}//console.log(calSpecificNum(10000,1));//给定两个字符串，判断str1是否可以由str2循环移动得到,function moveToString(str1,str2){    if(str1.length !== str2.length){        return false;    }    var temStr = str1 + str1;    if(temStr.indexOf(str2) !== -1){        return true;    }    else{        return false;    }}console.log(moveToString('asdff','dffas'));